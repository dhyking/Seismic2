package com.dhy.seismic2.daos.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.dhy.seismic2.daos.bean.GoodsInfoModel;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "MATERIALITEM".
*/
public class GoodsInfoModelDao extends AbstractDao<GoodsInfoModel, String> {

    public static final String TABLENAME = "MATERIALITEM";

    /**
     * Properties of entity GoodsInfoModel.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property ID = new Property(0, String.class, "ID", true, "ID");
        public final static Property CODE = new Property(1, String.class, "CODE", false, "CODE");
        public final static Property TYPE = new Property(2, String.class, "TYPE", false, "TYPE");
        public final static Property NAME = new Property(3, String.class, "NAME", false, "NAME");
        public final static Property AMOUNT = new Property(4, int.class, "AMOUNT", false, "AMOUNT");
        public final static Property STATE = new Property(5, int.class, "STATE", false, "STATE");
    }


    public GoodsInfoModelDao(DaoConfig config) {
        super(config);
    }
    
    public GoodsInfoModelDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"MATERIALITEM\" (" + //
                "\"ID\" TEXT PRIMARY KEY NOT NULL ," + // 0: ID
                "\"CODE\" TEXT," + // 1: CODE
                "\"TYPE\" TEXT," + // 2: TYPE
                "\"NAME\" TEXT," + // 3: NAME
                "\"AMOUNT\" INTEGER NOT NULL ," + // 4: AMOUNT
                "\"STATE\" INTEGER NOT NULL );"); // 5: STATE
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"MATERIALITEM\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, GoodsInfoModel entity) {
        stmt.clearBindings();
 
        String ID = entity.getID();
        if (ID != null) {
            stmt.bindString(1, ID);
        }
 
        String CODE = entity.getCODE();
        if (CODE != null) {
            stmt.bindString(2, CODE);
        }
 
        String TYPE = entity.getTYPE();
        if (TYPE != null) {
            stmt.bindString(3, TYPE);
        }
 
        String NAME = entity.getNAME();
        if (NAME != null) {
            stmt.bindString(4, NAME);
        }
        stmt.bindLong(5, entity.getAMOUNT());
        stmt.bindLong(6, entity.getSTATE());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, GoodsInfoModel entity) {
        stmt.clearBindings();
 
        String ID = entity.getID();
        if (ID != null) {
            stmt.bindString(1, ID);
        }
 
        String CODE = entity.getCODE();
        if (CODE != null) {
            stmt.bindString(2, CODE);
        }
 
        String TYPE = entity.getTYPE();
        if (TYPE != null) {
            stmt.bindString(3, TYPE);
        }
 
        String NAME = entity.getNAME();
        if (NAME != null) {
            stmt.bindString(4, NAME);
        }
        stmt.bindLong(5, entity.getAMOUNT());
        stmt.bindLong(6, entity.getSTATE());
    }

    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0);
    }    

    @Override
    public GoodsInfoModel readEntity(Cursor cursor, int offset) {
        GoodsInfoModel entity = new GoodsInfoModel( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // ID
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // CODE
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // TYPE
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // NAME
            cursor.getInt(offset + 4), // AMOUNT
            cursor.getInt(offset + 5) // STATE
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, GoodsInfoModel entity, int offset) {
        entity.setID(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setCODE(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setTYPE(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setNAME(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setAMOUNT(cursor.getInt(offset + 4));
        entity.setSTATE(cursor.getInt(offset + 5));
     }
    
    @Override
    protected final String updateKeyAfterInsert(GoodsInfoModel entity, long rowId) {
        return entity.getID();
    }
    
    @Override
    public String getKey(GoodsInfoModel entity) {
        if(entity != null) {
            return entity.getID();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(GoodsInfoModel entity) {
        return entity.getID() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}

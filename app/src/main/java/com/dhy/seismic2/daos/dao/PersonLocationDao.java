package com.dhy.seismic2.daos.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.dhy.seismic2.daos.bean.PersonLocation;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "PersonLocation".
*/
public class PersonLocationDao extends AbstractDao<PersonLocation, String> {

    public static final String TABLENAME = "PersonLocation";

    /**
     * Properties of entity PersonLocation.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, String.class, "Id", true, "ID");
        public final static Property UserId = new Property(1, String.class, "UserId", false, "USER_ID");
        public final static Property CreatedTime = new Property(2, String.class, "CreatedTime", false, "CREATED_TIME");
        public final static Property Address = new Property(3, String.class, "Address", false, "ADDRESS");
        public final static Property X = new Property(4, double.class, "X", false, "X");
        public final static Property Y = new Property(5, double.class, "Y", false, "Y");
        public final static Property EventHeadId = new Property(6, String.class, "EventHeadId", false, "EVENT_HEAD_ID");
    }


    public PersonLocationDao(DaoConfig config) {
        super(config);
    }
    
    public PersonLocationDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"PersonLocation\" (" + //
                "\"ID\" TEXT PRIMARY KEY NOT NULL ," + // 0: Id
                "\"USER_ID\" TEXT," + // 1: UserId
                "\"CREATED_TIME\" TEXT," + // 2: CreatedTime
                "\"ADDRESS\" TEXT," + // 3: Address
                "\"X\" REAL NOT NULL ," + // 4: X
                "\"Y\" REAL NOT NULL ," + // 5: Y
                "\"EVENT_HEAD_ID\" TEXT);"); // 6: EventHeadId
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"PersonLocation\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, PersonLocation entity) {
        stmt.clearBindings();
 
        String Id = entity.getId();
        if (Id != null) {
            stmt.bindString(1, Id);
        }
 
        String UserId = entity.getUserId();
        if (UserId != null) {
            stmt.bindString(2, UserId);
        }
 
        String CreatedTime = entity.getCreatedTime();
        if (CreatedTime != null) {
            stmt.bindString(3, CreatedTime);
        }
 
        String Address = entity.getAddress();
        if (Address != null) {
            stmt.bindString(4, Address);
        }
        stmt.bindDouble(5, entity.getX());
        stmt.bindDouble(6, entity.getY());
 
        String EventHeadId = entity.getEventHeadId();
        if (EventHeadId != null) {
            stmt.bindString(7, EventHeadId);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, PersonLocation entity) {
        stmt.clearBindings();
 
        String Id = entity.getId();
        if (Id != null) {
            stmt.bindString(1, Id);
        }
 
        String UserId = entity.getUserId();
        if (UserId != null) {
            stmt.bindString(2, UserId);
        }
 
        String CreatedTime = entity.getCreatedTime();
        if (CreatedTime != null) {
            stmt.bindString(3, CreatedTime);
        }
 
        String Address = entity.getAddress();
        if (Address != null) {
            stmt.bindString(4, Address);
        }
        stmt.bindDouble(5, entity.getX());
        stmt.bindDouble(6, entity.getY());
 
        String EventHeadId = entity.getEventHeadId();
        if (EventHeadId != null) {
            stmt.bindString(7, EventHeadId);
        }
    }

    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0);
    }    

    @Override
    public PersonLocation readEntity(Cursor cursor, int offset) {
        PersonLocation entity = new PersonLocation( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // Id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // UserId
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // CreatedTime
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // Address
            cursor.getDouble(offset + 4), // X
            cursor.getDouble(offset + 5), // Y
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6) // EventHeadId
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, PersonLocation entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setUserId(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setCreatedTime(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setAddress(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setX(cursor.getDouble(offset + 4));
        entity.setY(cursor.getDouble(offset + 5));
        entity.setEventHeadId(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
     }
    
    @Override
    protected final String updateKeyAfterInsert(PersonLocation entity, long rowId) {
        return entity.getId();
    }
    
    @Override
    public String getKey(PersonLocation entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(PersonLocation entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}

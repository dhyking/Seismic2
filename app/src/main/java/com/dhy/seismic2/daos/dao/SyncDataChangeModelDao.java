package com.dhy.seismic2.daos.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.dhy.seismic2.daos.bean.SyncDataChangeModel;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "LocalTableChangedLog".
*/
public class SyncDataChangeModelDao extends AbstractDao<SyncDataChangeModel, String> {

    public static final String TABLENAME = "LocalTableChangedLog";

    /**
     * Properties of entity SyncDataChangeModel.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, String.class, "Id", true, "ID");
        public final static Property TableName = new Property(1, String.class, "TableName", false, "TABLE_NAME");
        public final static Property PrimaryKeyId = new Property(2, String.class, "PrimaryKeyId", false, "PRIMARY_KEY_ID");
        public final static Property ActionType = new Property(3, String.class, "ActionType", false, "ACTION_TYPE");
        public final static Property RowData = new Property(4, String.class, "RowData", false, "ROW_DATA");
        public final static Property CreateId = new Property(5, String.class, "CreateId", false, "CREATE_ID");
        public final static Property Creator = new Property(6, String.class, "Creator", false, "CREATOR");
        public final static Property CreatedTime = new Property(7, String.class, "CreatedTime", false, "CREATED_TIME");
        public final static Property IsFinish = new Property(8, int.class, "IsFinish", false, "IS_FINISH");
    }


    public SyncDataChangeModelDao(DaoConfig config) {
        super(config);
    }
    
    public SyncDataChangeModelDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"LocalTableChangedLog\" (" + //
                "\"ID\" TEXT PRIMARY KEY NOT NULL ," + // 0: Id
                "\"TABLE_NAME\" TEXT," + // 1: TableName
                "\"PRIMARY_KEY_ID\" TEXT," + // 2: PrimaryKeyId
                "\"ACTION_TYPE\" TEXT," + // 3: ActionType
                "\"ROW_DATA\" TEXT," + // 4: RowData
                "\"CREATE_ID\" TEXT," + // 5: CreateId
                "\"CREATOR\" TEXT," + // 6: Creator
                "\"CREATED_TIME\" TEXT," + // 7: CreatedTime
                "\"IS_FINISH\" INTEGER NOT NULL );"); // 8: IsFinish
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"LocalTableChangedLog\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, SyncDataChangeModel entity) {
        stmt.clearBindings();
 
        String Id = entity.getId();
        if (Id != null) {
            stmt.bindString(1, Id);
        }
 
        String TableName = entity.getTableName();
        if (TableName != null) {
            stmt.bindString(2, TableName);
        }
 
        String PrimaryKeyId = entity.getPrimaryKeyId();
        if (PrimaryKeyId != null) {
            stmt.bindString(3, PrimaryKeyId);
        }
 
        String ActionType = entity.getActionType();
        if (ActionType != null) {
            stmt.bindString(4, ActionType);
        }
 
        String RowData = entity.getRowData();
        if (RowData != null) {
            stmt.bindString(5, RowData);
        }
 
        String CreateId = entity.getCreateId();
        if (CreateId != null) {
            stmt.bindString(6, CreateId);
        }
 
        String Creator = entity.getCreator();
        if (Creator != null) {
            stmt.bindString(7, Creator);
        }
 
        String CreatedTime = entity.getCreatedTime();
        if (CreatedTime != null) {
            stmt.bindString(8, CreatedTime);
        }
        stmt.bindLong(9, entity.getIsFinish());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, SyncDataChangeModel entity) {
        stmt.clearBindings();
 
        String Id = entity.getId();
        if (Id != null) {
            stmt.bindString(1, Id);
        }
 
        String TableName = entity.getTableName();
        if (TableName != null) {
            stmt.bindString(2, TableName);
        }
 
        String PrimaryKeyId = entity.getPrimaryKeyId();
        if (PrimaryKeyId != null) {
            stmt.bindString(3, PrimaryKeyId);
        }
 
        String ActionType = entity.getActionType();
        if (ActionType != null) {
            stmt.bindString(4, ActionType);
        }
 
        String RowData = entity.getRowData();
        if (RowData != null) {
            stmt.bindString(5, RowData);
        }
 
        String CreateId = entity.getCreateId();
        if (CreateId != null) {
            stmt.bindString(6, CreateId);
        }
 
        String Creator = entity.getCreator();
        if (Creator != null) {
            stmt.bindString(7, Creator);
        }
 
        String CreatedTime = entity.getCreatedTime();
        if (CreatedTime != null) {
            stmt.bindString(8, CreatedTime);
        }
        stmt.bindLong(9, entity.getIsFinish());
    }

    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0);
    }    

    @Override
    public SyncDataChangeModel readEntity(Cursor cursor, int offset) {
        SyncDataChangeModel entity = new SyncDataChangeModel( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // Id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // TableName
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // PrimaryKeyId
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // ActionType
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // RowData
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // CreateId
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // Creator
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // CreatedTime
            cursor.getInt(offset + 8) // IsFinish
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, SyncDataChangeModel entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setTableName(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setPrimaryKeyId(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setActionType(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setRowData(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setCreateId(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setCreator(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setCreatedTime(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setIsFinish(cursor.getInt(offset + 8));
     }
    
    @Override
    protected final String updateKeyAfterInsert(SyncDataChangeModel entity, long rowId) {
        return entity.getId();
    }
    
    @Override
    public String getKey(SyncDataChangeModel entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(SyncDataChangeModel entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}

package com.dhy.seismic2.daos.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.dhy.seismic2.daos.bean.EventTeamModel;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "EVENTTEAMITEM".
*/
public class EventTeamModelDao extends AbstractDao<EventTeamModel, String> {

    public static final String TABLENAME = "EVENTTEAMITEM";

    /**
     * Properties of entity EventTeamModel.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property ID = new Property(0, String.class, "ID", true, "ID");
        public final static Property EVENTHEADID = new Property(1, String.class, "EVENTHEADID", false, "EVENTHEADID");
        public final static Property EVENTCENTERITEMID = new Property(2, String.class, "EVENTCENTERITEMID", false, "EVENTCENTERITEMID");
        public final static Property CODE = new Property(3, int.class, "CODE", false, "CODE");
        public final static Property NAME = new Property(4, String.class, "NAME", false, "NAME");
        public final static Property DESCRIPTION = new Property(5, String.class, "DESCRIPTION", false, "DESCRIPTION");
        public final static Property USERID = new Property(6, String.class, "USERID", false, "USERID");
        public final static Property USERNAME = new Property(7, String.class, "USERNAME", false, "USERNAME");
        public final static Property STATE = new Property(8, int.class, "STATE", false, "STATE");
    }


    public EventTeamModelDao(DaoConfig config) {
        super(config);
    }
    
    public EventTeamModelDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"EVENTTEAMITEM\" (" + //
                "\"ID\" TEXT PRIMARY KEY NOT NULL ," + // 0: ID
                "\"EVENTHEADID\" TEXT," + // 1: EVENTHEADID
                "\"EVENTCENTERITEMID\" TEXT," + // 2: EVENTCENTERITEMID
                "\"CODE\" INTEGER NOT NULL ," + // 3: CODE
                "\"NAME\" TEXT," + // 4: NAME
                "\"DESCRIPTION\" TEXT," + // 5: DESCRIPTION
                "\"USERID\" TEXT," + // 6: USERID
                "\"USERNAME\" TEXT," + // 7: USERNAME
                "\"STATE\" INTEGER NOT NULL );"); // 8: STATE
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"EVENTTEAMITEM\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, EventTeamModel entity) {
        stmt.clearBindings();
 
        String ID = entity.getID();
        if (ID != null) {
            stmt.bindString(1, ID);
        }
 
        String EVENTHEADID = entity.getEVENTHEADID();
        if (EVENTHEADID != null) {
            stmt.bindString(2, EVENTHEADID);
        }
 
        String EVENTCENTERITEMID = entity.getEVENTCENTERITEMID();
        if (EVENTCENTERITEMID != null) {
            stmt.bindString(3, EVENTCENTERITEMID);
        }
        stmt.bindLong(4, entity.getCODE());
 
        String NAME = entity.getNAME();
        if (NAME != null) {
            stmt.bindString(5, NAME);
        }
 
        String DESCRIPTION = entity.getDESCRIPTION();
        if (DESCRIPTION != null) {
            stmt.bindString(6, DESCRIPTION);
        }
 
        String USERID = entity.getUSERID();
        if (USERID != null) {
            stmt.bindString(7, USERID);
        }
 
        String USERNAME = entity.getUSERNAME();
        if (USERNAME != null) {
            stmt.bindString(8, USERNAME);
        }
        stmt.bindLong(9, entity.getSTATE());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, EventTeamModel entity) {
        stmt.clearBindings();
 
        String ID = entity.getID();
        if (ID != null) {
            stmt.bindString(1, ID);
        }
 
        String EVENTHEADID = entity.getEVENTHEADID();
        if (EVENTHEADID != null) {
            stmt.bindString(2, EVENTHEADID);
        }
 
        String EVENTCENTERITEMID = entity.getEVENTCENTERITEMID();
        if (EVENTCENTERITEMID != null) {
            stmt.bindString(3, EVENTCENTERITEMID);
        }
        stmt.bindLong(4, entity.getCODE());
 
        String NAME = entity.getNAME();
        if (NAME != null) {
            stmt.bindString(5, NAME);
        }
 
        String DESCRIPTION = entity.getDESCRIPTION();
        if (DESCRIPTION != null) {
            stmt.bindString(6, DESCRIPTION);
        }
 
        String USERID = entity.getUSERID();
        if (USERID != null) {
            stmt.bindString(7, USERID);
        }
 
        String USERNAME = entity.getUSERNAME();
        if (USERNAME != null) {
            stmt.bindString(8, USERNAME);
        }
        stmt.bindLong(9, entity.getSTATE());
    }

    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0);
    }    

    @Override
    public EventTeamModel readEntity(Cursor cursor, int offset) {
        EventTeamModel entity = new EventTeamModel( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // ID
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // EVENTHEADID
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // EVENTCENTERITEMID
            cursor.getInt(offset + 3), // CODE
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // NAME
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // DESCRIPTION
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // USERID
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // USERNAME
            cursor.getInt(offset + 8) // STATE
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, EventTeamModel entity, int offset) {
        entity.setID(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setEVENTHEADID(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setEVENTCENTERITEMID(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setCODE(cursor.getInt(offset + 3));
        entity.setNAME(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setDESCRIPTION(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setUSERID(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setUSERNAME(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setSTATE(cursor.getInt(offset + 8));
     }
    
    @Override
    protected final String updateKeyAfterInsert(EventTeamModel entity, long rowId) {
        return entity.getID();
    }
    
    @Override
    public String getKey(EventTeamModel entity) {
        if(entity != null) {
            return entity.getID();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(EventTeamModel entity) {
        return entity.getID() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}

package com.dhy.seismic2.daos.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.dhy.seismic2.daos.bean.EventMemberItem;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "EVENTMEMBERITEM".
*/
public class EventMemberItemDao extends AbstractDao<EventMemberItem, String> {

    public static final String TABLENAME = "EVENTMEMBERITEM";

    /**
     * Properties of entity EventMemberItem.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property ID = new Property(0, String.class, "ID", true, "ID");
        public final static Property EVENTTEAMITEMID = new Property(1, String.class, "EVENTTEAMITEMID", false, "EVENTTEAMITEMID");
        public final static Property USERID = new Property(2, String.class, "USERID", false, "USERID");
        public final static Property USERNAME = new Property(3, String.class, "USERNAME", false, "USERNAME");
        public final static Property STATE = new Property(4, int.class, "STATE", false, "STATE");
        public final static Property MEMBERTYPE = new Property(5, int.class, "MEMBERTYPE", false, "MEMBERTYPE");
    }


    public EventMemberItemDao(DaoConfig config) {
        super(config);
    }
    
    public EventMemberItemDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"EVENTMEMBERITEM\" (" + //
                "\"ID\" TEXT PRIMARY KEY NOT NULL ," + // 0: ID
                "\"EVENTTEAMITEMID\" TEXT," + // 1: EVENTTEAMITEMID
                "\"USERID\" TEXT," + // 2: USERID
                "\"USERNAME\" TEXT," + // 3: USERNAME
                "\"STATE\" INTEGER NOT NULL ," + // 4: STATE
                "\"MEMBERTYPE\" INTEGER NOT NULL );"); // 5: MEMBERTYPE
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"EVENTMEMBERITEM\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, EventMemberItem entity) {
        stmt.clearBindings();
 
        String ID = entity.getID();
        if (ID != null) {
            stmt.bindString(1, ID);
        }
 
        String EVENTTEAMITEMID = entity.getEVENTTEAMITEMID();
        if (EVENTTEAMITEMID != null) {
            stmt.bindString(2, EVENTTEAMITEMID);
        }
 
        String USERID = entity.getUSERID();
        if (USERID != null) {
            stmt.bindString(3, USERID);
        }
 
        String USERNAME = entity.getUSERNAME();
        if (USERNAME != null) {
            stmt.bindString(4, USERNAME);
        }
        stmt.bindLong(5, entity.getSTATE());
        stmt.bindLong(6, entity.getMEMBERTYPE());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, EventMemberItem entity) {
        stmt.clearBindings();
 
        String ID = entity.getID();
        if (ID != null) {
            stmt.bindString(1, ID);
        }
 
        String EVENTTEAMITEMID = entity.getEVENTTEAMITEMID();
        if (EVENTTEAMITEMID != null) {
            stmt.bindString(2, EVENTTEAMITEMID);
        }
 
        String USERID = entity.getUSERID();
        if (USERID != null) {
            stmt.bindString(3, USERID);
        }
 
        String USERNAME = entity.getUSERNAME();
        if (USERNAME != null) {
            stmt.bindString(4, USERNAME);
        }
        stmt.bindLong(5, entity.getSTATE());
        stmt.bindLong(6, entity.getMEMBERTYPE());
    }

    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0);
    }    

    @Override
    public EventMemberItem readEntity(Cursor cursor, int offset) {
        EventMemberItem entity = new EventMemberItem( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // ID
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // EVENTTEAMITEMID
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // USERID
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // USERNAME
            cursor.getInt(offset + 4), // STATE
            cursor.getInt(offset + 5) // MEMBERTYPE
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, EventMemberItem entity, int offset) {
        entity.setID(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setEVENTTEAMITEMID(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setUSERID(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setUSERNAME(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setSTATE(cursor.getInt(offset + 4));
        entity.setMEMBERTYPE(cursor.getInt(offset + 5));
     }
    
    @Override
    protected final String updateKeyAfterInsert(EventMemberItem entity, long rowId) {
        return entity.getID();
    }
    
    @Override
    public String getKey(EventMemberItem entity) {
        if(entity != null) {
            return entity.getID();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(EventMemberItem entity) {
        return entity.getID() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}

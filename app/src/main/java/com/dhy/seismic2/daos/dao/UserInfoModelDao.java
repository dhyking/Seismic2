package com.dhy.seismic2.daos.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.dhy.seismic2.daos.bean.UserInfoModel;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "BASEUSER".
*/
public class UserInfoModelDao extends AbstractDao<UserInfoModel, String> {

    public static final String TABLENAME = "BASEUSER";

    /**
     * Properties of entity UserInfoModel.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property ID = new Property(0, String.class, "ID", true, "ID");
        public final static Property USERNAME = new Property(1, String.class, "USERNAME", false, "USERNAME");
        public final static Property ACCOUNT = new Property(2, String.class, "ACCOUNT", false, "ACCOUNT");
        public final static Property PASSWORD = new Property(3, String.class, "PASSWORD", false, "PASSWORD");
        public final static Property SEX = new Property(4, String.class, "SEX", false, "SEX");
        public final static Property SATION = new Property(5, String.class, "SATION", false, "SATION");
        public final static Property COMPANY = new Property(6, String.class, "COMPANY", false, "COMPANY");
        public final static Property DEPT = new Property(7, String.class, "DEPT", false, "DEPT");
        public final static Property ADDRESS = new Property(8, String.class, "ADDRESS", false, "ADDRESS");
        public final static Property POST = new Property(9, String.class, "POST", false, "POST");
        public final static Property EMAIL = new Property(10, String.class, "EMAIL", false, "EMAIL");
        public final static Property PHONE = new Property(11, String.class, "PHONE", false, "PHONE");
        public final static Property MOBILE = new Property(12, String.class, "MOBILE", false, "MOBILE");
        public final static Property CLASSIFY = new Property(13, int.class, "CLASSIFY", false, "CLASSIFY");
        public final static Property STATE = new Property(14, int.class, "STATE", false, "STATE");
        public final static Property CREATEDTIME = new Property(15, String.class, "CREATEDTIME", false, "CREATEDTIME");
        public final static Property CREATEID = new Property(16, String.class, "CREATEID", false, "CREATEID");
        public final static Property CREATOR = new Property(17, String.class, "CREATOR", false, "CREATOR");
        public final static Property MODIFIEDID = new Property(18, String.class, "MODIFIEDID", false, "MODIFIEDID");
        public final static Property MODIFIER = new Property(19, String.class, "MODIFIER", false, "MODIFIER");
        public final static Property MODIFIEDTIME = new Property(20, String.class, "MODIFIEDTIME", false, "MODIFIEDTIME");
    }


    public UserInfoModelDao(DaoConfig config) {
        super(config);
    }
    
    public UserInfoModelDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"BASEUSER\" (" + //
                "\"ID\" TEXT PRIMARY KEY NOT NULL ," + // 0: ID
                "\"USERNAME\" TEXT," + // 1: USERNAME
                "\"ACCOUNT\" TEXT," + // 2: ACCOUNT
                "\"PASSWORD\" TEXT," + // 3: PASSWORD
                "\"SEX\" TEXT," + // 4: SEX
                "\"SATION\" TEXT," + // 5: SATION
                "\"COMPANY\" TEXT," + // 6: COMPANY
                "\"DEPT\" TEXT," + // 7: DEPT
                "\"ADDRESS\" TEXT," + // 8: ADDRESS
                "\"POST\" TEXT," + // 9: POST
                "\"EMAIL\" TEXT," + // 10: EMAIL
                "\"PHONE\" TEXT," + // 11: PHONE
                "\"MOBILE\" TEXT," + // 12: MOBILE
                "\"CLASSIFY\" INTEGER NOT NULL ," + // 13: CLASSIFY
                "\"STATE\" INTEGER NOT NULL ," + // 14: STATE
                "\"CREATEDTIME\" TEXT," + // 15: CREATEDTIME
                "\"CREATEID\" TEXT," + // 16: CREATEID
                "\"CREATOR\" TEXT," + // 17: CREATOR
                "\"MODIFIEDID\" TEXT," + // 18: MODIFIEDID
                "\"MODIFIER\" TEXT," + // 19: MODIFIER
                "\"MODIFIEDTIME\" TEXT);"); // 20: MODIFIEDTIME
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"BASEUSER\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, UserInfoModel entity) {
        stmt.clearBindings();
 
        String ID = entity.getID();
        if (ID != null) {
            stmt.bindString(1, ID);
        }
 
        String USERNAME = entity.getUSERNAME();
        if (USERNAME != null) {
            stmt.bindString(2, USERNAME);
        }
 
        String ACCOUNT = entity.getACCOUNT();
        if (ACCOUNT != null) {
            stmt.bindString(3, ACCOUNT);
        }
 
        String PASSWORD = entity.getPASSWORD();
        if (PASSWORD != null) {
            stmt.bindString(4, PASSWORD);
        }
 
        String SEX = entity.getSEX();
        if (SEX != null) {
            stmt.bindString(5, SEX);
        }
 
        String SATION = entity.getSATION();
        if (SATION != null) {
            stmt.bindString(6, SATION);
        }
 
        String COMPANY = entity.getCOMPANY();
        if (COMPANY != null) {
            stmt.bindString(7, COMPANY);
        }
 
        String DEPT = entity.getDEPT();
        if (DEPT != null) {
            stmt.bindString(8, DEPT);
        }
 
        String ADDRESS = entity.getADDRESS();
        if (ADDRESS != null) {
            stmt.bindString(9, ADDRESS);
        }
 
        String POST = entity.getPOST();
        if (POST != null) {
            stmt.bindString(10, POST);
        }
 
        String EMAIL = entity.getEMAIL();
        if (EMAIL != null) {
            stmt.bindString(11, EMAIL);
        }
 
        String PHONE = entity.getPHONE();
        if (PHONE != null) {
            stmt.bindString(12, PHONE);
        }
 
        String MOBILE = entity.getMOBILE();
        if (MOBILE != null) {
            stmt.bindString(13, MOBILE);
        }
        stmt.bindLong(14, entity.getCLASSIFY());
        stmt.bindLong(15, entity.getSTATE());
 
        String CREATEDTIME = entity.getCREATEDTIME();
        if (CREATEDTIME != null) {
            stmt.bindString(16, CREATEDTIME);
        }
 
        String CREATEID = entity.getCREATEID();
        if (CREATEID != null) {
            stmt.bindString(17, CREATEID);
        }
 
        String CREATOR = entity.getCREATOR();
        if (CREATOR != null) {
            stmt.bindString(18, CREATOR);
        }
 
        String MODIFIEDID = entity.getMODIFIEDID();
        if (MODIFIEDID != null) {
            stmt.bindString(19, MODIFIEDID);
        }
 
        String MODIFIER = entity.getMODIFIER();
        if (MODIFIER != null) {
            stmt.bindString(20, MODIFIER);
        }
 
        String MODIFIEDTIME = entity.getMODIFIEDTIME();
        if (MODIFIEDTIME != null) {
            stmt.bindString(21, MODIFIEDTIME);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, UserInfoModel entity) {
        stmt.clearBindings();
 
        String ID = entity.getID();
        if (ID != null) {
            stmt.bindString(1, ID);
        }
 
        String USERNAME = entity.getUSERNAME();
        if (USERNAME != null) {
            stmt.bindString(2, USERNAME);
        }
 
        String ACCOUNT = entity.getACCOUNT();
        if (ACCOUNT != null) {
            stmt.bindString(3, ACCOUNT);
        }
 
        String PASSWORD = entity.getPASSWORD();
        if (PASSWORD != null) {
            stmt.bindString(4, PASSWORD);
        }
 
        String SEX = entity.getSEX();
        if (SEX != null) {
            stmt.bindString(5, SEX);
        }
 
        String SATION = entity.getSATION();
        if (SATION != null) {
            stmt.bindString(6, SATION);
        }
 
        String COMPANY = entity.getCOMPANY();
        if (COMPANY != null) {
            stmt.bindString(7, COMPANY);
        }
 
        String DEPT = entity.getDEPT();
        if (DEPT != null) {
            stmt.bindString(8, DEPT);
        }
 
        String ADDRESS = entity.getADDRESS();
        if (ADDRESS != null) {
            stmt.bindString(9, ADDRESS);
        }
 
        String POST = entity.getPOST();
        if (POST != null) {
            stmt.bindString(10, POST);
        }
 
        String EMAIL = entity.getEMAIL();
        if (EMAIL != null) {
            stmt.bindString(11, EMAIL);
        }
 
        String PHONE = entity.getPHONE();
        if (PHONE != null) {
            stmt.bindString(12, PHONE);
        }
 
        String MOBILE = entity.getMOBILE();
        if (MOBILE != null) {
            stmt.bindString(13, MOBILE);
        }
        stmt.bindLong(14, entity.getCLASSIFY());
        stmt.bindLong(15, entity.getSTATE());
 
        String CREATEDTIME = entity.getCREATEDTIME();
        if (CREATEDTIME != null) {
            stmt.bindString(16, CREATEDTIME);
        }
 
        String CREATEID = entity.getCREATEID();
        if (CREATEID != null) {
            stmt.bindString(17, CREATEID);
        }
 
        String CREATOR = entity.getCREATOR();
        if (CREATOR != null) {
            stmt.bindString(18, CREATOR);
        }
 
        String MODIFIEDID = entity.getMODIFIEDID();
        if (MODIFIEDID != null) {
            stmt.bindString(19, MODIFIEDID);
        }
 
        String MODIFIER = entity.getMODIFIER();
        if (MODIFIER != null) {
            stmt.bindString(20, MODIFIER);
        }
 
        String MODIFIEDTIME = entity.getMODIFIEDTIME();
        if (MODIFIEDTIME != null) {
            stmt.bindString(21, MODIFIEDTIME);
        }
    }

    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0);
    }    

    @Override
    public UserInfoModel readEntity(Cursor cursor, int offset) {
        UserInfoModel entity = new UserInfoModel( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // ID
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // USERNAME
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // ACCOUNT
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // PASSWORD
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // SEX
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // SATION
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // COMPANY
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // DEPT
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // ADDRESS
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // POST
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // EMAIL
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // PHONE
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12), // MOBILE
            cursor.getInt(offset + 13), // CLASSIFY
            cursor.getInt(offset + 14), // STATE
            cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15), // CREATEDTIME
            cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16), // CREATEID
            cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17), // CREATOR
            cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18), // MODIFIEDID
            cursor.isNull(offset + 19) ? null : cursor.getString(offset + 19), // MODIFIER
            cursor.isNull(offset + 20) ? null : cursor.getString(offset + 20) // MODIFIEDTIME
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, UserInfoModel entity, int offset) {
        entity.setID(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setUSERNAME(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setACCOUNT(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setPASSWORD(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setSEX(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setSATION(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setCOMPANY(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setDEPT(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setADDRESS(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setPOST(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setEMAIL(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setPHONE(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setMOBILE(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
        entity.setCLASSIFY(cursor.getInt(offset + 13));
        entity.setSTATE(cursor.getInt(offset + 14));
        entity.setCREATEDTIME(cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15));
        entity.setCREATEID(cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16));
        entity.setCREATOR(cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17));
        entity.setMODIFIEDID(cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18));
        entity.setMODIFIER(cursor.isNull(offset + 19) ? null : cursor.getString(offset + 19));
        entity.setMODIFIEDTIME(cursor.isNull(offset + 20) ? null : cursor.getString(offset + 20));
     }
    
    @Override
    protected final String updateKeyAfterInsert(UserInfoModel entity, long rowId) {
        return entity.getID();
    }
    
    @Override
    public String getKey(UserInfoModel entity) {
        if(entity != null) {
            return entity.getID();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(UserInfoModel entity) {
        return entity.getID() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}

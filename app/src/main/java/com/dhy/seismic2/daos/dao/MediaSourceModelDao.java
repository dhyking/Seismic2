package com.dhy.seismic2.daos.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.dhy.seismic2.daos.bean.MediaSourceModel;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "MEDIARESOURCE".
*/
public class MediaSourceModelDao extends AbstractDao<MediaSourceModel, String> {

    public static final String TABLENAME = "MEDIARESOURCE";

    /**
     * Properties of entity MediaSourceModel.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property ID = new Property(0, String.class, "ID", true, "ID");
        public final static Property BELONGTO = new Property(1, String.class, "BELONGTO", false, "BELONGTO");
        public final static Property IMAGEURL = new Property(2, String.class, "IMAGEURL", false, "IMAGEURL");
        public final static Property FILEURL = new Property(3, String.class, "FILEURL", false, "FILEURL");
        public final static Property TITLE = new Property(4, String.class, "TITLE", false, "TITLE");
        public final static Property TASKID = new Property(5, String.class, "TASKID", false, "TASKID");
        public final static Property TASKNAME = new Property(6, String.class, "TASKNAME", false, "TASKNAME");
        public final static Property LONGITUDE = new Property(7, double.class, "LONGITUDE", false, "LONGITUDE");
        public final static Property LATITUDE = new Property(8, double.class, "LATITUDE", false, "LATITUDE");
        public final static Property AREA = new Property(9, String.class, "AREA", false, "AREA");
        public final static Property ADDRESS = new Property(10, String.class, "ADDRESS", false, "ADDRESS");
        public final static Property TYPE = new Property(11, int.class, "TYPE", false, "TYPE");
        public final static Property ISUPLOAD = new Property(12, int.class, "ISUPLOAD", false, "ISUPLOAD");
        public final static Property INQUIRERID = new Property(13, String.class, "INQUIRERID", false, "INQUIRERID");
        public final static Property INQUIRERNAME = new Property(14, String.class, "INQUIRERNAME", false, "INQUIRERNAME");
        public final static Property INQUIRERTIME = new Property(15, String.class, "INQUIRERTIME", false, "INQUIRERTIME");
        public final static Property State = new Property(16, int.class, "State", false, "STATE");
        public final static Property EventHeadId = new Property(17, String.class, "EventHeadId", false, "EVENT_HEAD_ID");
    }


    public MediaSourceModelDao(DaoConfig config) {
        super(config);
    }
    
    public MediaSourceModelDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"MEDIARESOURCE\" (" + //
                "\"ID\" TEXT PRIMARY KEY NOT NULL ," + // 0: ID
                "\"BELONGTO\" TEXT," + // 1: BELONGTO
                "\"IMAGEURL\" TEXT," + // 2: IMAGEURL
                "\"FILEURL\" TEXT," + // 3: FILEURL
                "\"TITLE\" TEXT," + // 4: TITLE
                "\"TASKID\" TEXT," + // 5: TASKID
                "\"TASKNAME\" TEXT," + // 6: TASKNAME
                "\"LONGITUDE\" REAL NOT NULL ," + // 7: LONGITUDE
                "\"LATITUDE\" REAL NOT NULL ," + // 8: LATITUDE
                "\"AREA\" TEXT," + // 9: AREA
                "\"ADDRESS\" TEXT," + // 10: ADDRESS
                "\"TYPE\" INTEGER NOT NULL ," + // 11: TYPE
                "\"ISUPLOAD\" INTEGER NOT NULL ," + // 12: ISUPLOAD
                "\"INQUIRERID\" TEXT," + // 13: INQUIRERID
                "\"INQUIRERNAME\" TEXT," + // 14: INQUIRERNAME
                "\"INQUIRERTIME\" TEXT," + // 15: INQUIRERTIME
                "\"STATE\" INTEGER NOT NULL ," + // 16: State
                "\"EVENT_HEAD_ID\" TEXT);"); // 17: EventHeadId
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"MEDIARESOURCE\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, MediaSourceModel entity) {
        stmt.clearBindings();
 
        String ID = entity.getID();
        if (ID != null) {
            stmt.bindString(1, ID);
        }
 
        String BELONGTO = entity.getBELONGTO();
        if (BELONGTO != null) {
            stmt.bindString(2, BELONGTO);
        }
 
        String IMAGEURL = entity.getIMAGEURL();
        if (IMAGEURL != null) {
            stmt.bindString(3, IMAGEURL);
        }
 
        String FILEURL = entity.getFILEURL();
        if (FILEURL != null) {
            stmt.bindString(4, FILEURL);
        }
 
        String TITLE = entity.getTITLE();
        if (TITLE != null) {
            stmt.bindString(5, TITLE);
        }
 
        String TASKID = entity.getTASKID();
        if (TASKID != null) {
            stmt.bindString(6, TASKID);
        }
 
        String TASKNAME = entity.getTASKNAME();
        if (TASKNAME != null) {
            stmt.bindString(7, TASKNAME);
        }
        stmt.bindDouble(8, entity.getLONGITUDE());
        stmt.bindDouble(9, entity.getLATITUDE());
 
        String AREA = entity.getAREA();
        if (AREA != null) {
            stmt.bindString(10, AREA);
        }
 
        String ADDRESS = entity.getADDRESS();
        if (ADDRESS != null) {
            stmt.bindString(11, ADDRESS);
        }
        stmt.bindLong(12, entity.getTYPE());
        stmt.bindLong(13, entity.getISUPLOAD());
 
        String INQUIRERID = entity.getINQUIRERID();
        if (INQUIRERID != null) {
            stmt.bindString(14, INQUIRERID);
        }
 
        String INQUIRERNAME = entity.getINQUIRERNAME();
        if (INQUIRERNAME != null) {
            stmt.bindString(15, INQUIRERNAME);
        }
 
        String INQUIRERTIME = entity.getINQUIRERTIME();
        if (INQUIRERTIME != null) {
            stmt.bindString(16, INQUIRERTIME);
        }
        stmt.bindLong(17, entity.getState());
 
        String EventHeadId = entity.getEventHeadId();
        if (EventHeadId != null) {
            stmt.bindString(18, EventHeadId);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, MediaSourceModel entity) {
        stmt.clearBindings();
 
        String ID = entity.getID();
        if (ID != null) {
            stmt.bindString(1, ID);
        }
 
        String BELONGTO = entity.getBELONGTO();
        if (BELONGTO != null) {
            stmt.bindString(2, BELONGTO);
        }
 
        String IMAGEURL = entity.getIMAGEURL();
        if (IMAGEURL != null) {
            stmt.bindString(3, IMAGEURL);
        }
 
        String FILEURL = entity.getFILEURL();
        if (FILEURL != null) {
            stmt.bindString(4, FILEURL);
        }
 
        String TITLE = entity.getTITLE();
        if (TITLE != null) {
            stmt.bindString(5, TITLE);
        }
 
        String TASKID = entity.getTASKID();
        if (TASKID != null) {
            stmt.bindString(6, TASKID);
        }
 
        String TASKNAME = entity.getTASKNAME();
        if (TASKNAME != null) {
            stmt.bindString(7, TASKNAME);
        }
        stmt.bindDouble(8, entity.getLONGITUDE());
        stmt.bindDouble(9, entity.getLATITUDE());
 
        String AREA = entity.getAREA();
        if (AREA != null) {
            stmt.bindString(10, AREA);
        }
 
        String ADDRESS = entity.getADDRESS();
        if (ADDRESS != null) {
            stmt.bindString(11, ADDRESS);
        }
        stmt.bindLong(12, entity.getTYPE());
        stmt.bindLong(13, entity.getISUPLOAD());
 
        String INQUIRERID = entity.getINQUIRERID();
        if (INQUIRERID != null) {
            stmt.bindString(14, INQUIRERID);
        }
 
        String INQUIRERNAME = entity.getINQUIRERNAME();
        if (INQUIRERNAME != null) {
            stmt.bindString(15, INQUIRERNAME);
        }
 
        String INQUIRERTIME = entity.getINQUIRERTIME();
        if (INQUIRERTIME != null) {
            stmt.bindString(16, INQUIRERTIME);
        }
        stmt.bindLong(17, entity.getState());
 
        String EventHeadId = entity.getEventHeadId();
        if (EventHeadId != null) {
            stmt.bindString(18, EventHeadId);
        }
    }

    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0);
    }    

    @Override
    public MediaSourceModel readEntity(Cursor cursor, int offset) {
        MediaSourceModel entity = new MediaSourceModel( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // ID
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // BELONGTO
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // IMAGEURL
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // FILEURL
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // TITLE
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // TASKID
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // TASKNAME
            cursor.getDouble(offset + 7), // LONGITUDE
            cursor.getDouble(offset + 8), // LATITUDE
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // AREA
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // ADDRESS
            cursor.getInt(offset + 11), // TYPE
            cursor.getInt(offset + 12), // ISUPLOAD
            cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13), // INQUIRERID
            cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14), // INQUIRERNAME
            cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15), // INQUIRERTIME
            cursor.getInt(offset + 16), // State
            cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17) // EventHeadId
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, MediaSourceModel entity, int offset) {
        entity.setID(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setBELONGTO(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setIMAGEURL(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setFILEURL(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setTITLE(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setTASKID(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setTASKNAME(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setLONGITUDE(cursor.getDouble(offset + 7));
        entity.setLATITUDE(cursor.getDouble(offset + 8));
        entity.setAREA(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setADDRESS(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setTYPE(cursor.getInt(offset + 11));
        entity.setISUPLOAD(cursor.getInt(offset + 12));
        entity.setINQUIRERID(cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13));
        entity.setINQUIRERNAME(cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14));
        entity.setINQUIRERTIME(cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15));
        entity.setState(cursor.getInt(offset + 16));
        entity.setEventHeadId(cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17));
     }
    
    @Override
    protected final String updateKeyAfterInsert(MediaSourceModel entity, long rowId) {
        return entity.getID();
    }
    
    @Override
    public String getKey(MediaSourceModel entity) {
        if(entity != null) {
            return entity.getID();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(MediaSourceModel entity) {
        return entity.getID() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}

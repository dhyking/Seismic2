package com.dhy.seismic2.daos.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.dhy.seismic2.daos.bean.UserRoleModel;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "USERROLE".
*/
public class UserRoleModelDao extends AbstractDao<UserRoleModel, String> {

    public static final String TABLENAME = "USERROLE";

    /**
     * Properties of entity UserRoleModel.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property ID = new Property(0, String.class, "ID", true, "ID");
        public final static Property USERID = new Property(1, String.class, "USERID", false, "USERID");
        public final static Property ROLEID = new Property(2, String.class, "ROLEID", false, "ROLEID");
        public final static Property STATE = new Property(3, int.class, "STATE", false, "STATE");
    }


    public UserRoleModelDao(DaoConfig config) {
        super(config);
    }
    
    public UserRoleModelDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"USERROLE\" (" + //
                "\"ID\" TEXT PRIMARY KEY NOT NULL ," + // 0: ID
                "\"USERID\" TEXT," + // 1: USERID
                "\"ROLEID\" TEXT," + // 2: ROLEID
                "\"STATE\" INTEGER NOT NULL );"); // 3: STATE
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"USERROLE\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, UserRoleModel entity) {
        stmt.clearBindings();
 
        String ID = entity.getID();
        if (ID != null) {
            stmt.bindString(1, ID);
        }
 
        String USERID = entity.getUSERID();
        if (USERID != null) {
            stmt.bindString(2, USERID);
        }
 
        String ROLEID = entity.getROLEID();
        if (ROLEID != null) {
            stmt.bindString(3, ROLEID);
        }
        stmt.bindLong(4, entity.getSTATE());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, UserRoleModel entity) {
        stmt.clearBindings();
 
        String ID = entity.getID();
        if (ID != null) {
            stmt.bindString(1, ID);
        }
 
        String USERID = entity.getUSERID();
        if (USERID != null) {
            stmt.bindString(2, USERID);
        }
 
        String ROLEID = entity.getROLEID();
        if (ROLEID != null) {
            stmt.bindString(3, ROLEID);
        }
        stmt.bindLong(4, entity.getSTATE());
    }

    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0);
    }    

    @Override
    public UserRoleModel readEntity(Cursor cursor, int offset) {
        UserRoleModel entity = new UserRoleModel( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // ID
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // USERID
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // ROLEID
            cursor.getInt(offset + 3) // STATE
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, UserRoleModel entity, int offset) {
        entity.setID(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setUSERID(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setROLEID(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setSTATE(cursor.getInt(offset + 3));
     }
    
    @Override
    protected final String updateKeyAfterInsert(UserRoleModel entity, long rowId) {
        return entity.getID();
    }
    
    @Override
    public String getKey(UserRoleModel entity) {
        if(entity != null) {
            return entity.getID();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(UserRoleModel entity) {
        return entity.getID() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}

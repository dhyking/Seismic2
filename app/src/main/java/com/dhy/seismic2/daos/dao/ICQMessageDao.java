package com.dhy.seismic2.daos.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.dhy.seismic2.daos.bean.ICQMessage;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "ICQMessage".
*/
public class ICQMessageDao extends AbstractDao<ICQMessage, Integer> {

    public static final String TABLENAME = "ICQMessage";

    /**
     * Properties of entity ICQMessage.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, int.class, "Id", true, "Id");
        public final static Property SenderId = new Property(1, String.class, "SenderId", false, "SenderId");
        public final static Property ReceiverType = new Property(2, int.class, "ReceiverType", false, "ReceiverType");
        public final static Property ReceiverId = new Property(3, String.class, "ReceiverId", false, "ReceiverId");
        public final static Property MsgType = new Property(4, int.class, "MsgType", false, "MsgType");
        public final static Property Content = new Property(5, String.class, "Content", false, "Content");
        public final static Property CreatedTime = new Property(6, String.class, "CreatedTime", false, "CreatedTime");
        public final static Property IsFinish = new Property(7, int.class, "IsFinish", false, "IsFinish");
        public final static Property FileName = new Property(8, String.class, "FileName", false, "FileName");
    }


    public ICQMessageDao(DaoConfig config) {
        super(config);
    }
    
    public ICQMessageDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"ICQMessage\" (" + //
                "\"Id\" INTEGER PRIMARY KEY NOT NULL ," + // 0: Id
                "\"SenderId\" TEXT," + // 1: SenderId
                "\"ReceiverType\" INTEGER NOT NULL ," + // 2: ReceiverType
                "\"ReceiverId\" TEXT," + // 3: ReceiverId
                "\"MsgType\" INTEGER NOT NULL ," + // 4: MsgType
                "\"Content\" TEXT," + // 5: Content
                "\"CreatedTime\" TEXT," + // 6: CreatedTime
                "\"IsFinish\" INTEGER NOT NULL ," + // 7: IsFinish
                "\"FileName\" TEXT);"); // 8: FileName
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"ICQMessage\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, ICQMessage entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getId());
 
        String SenderId = entity.getSenderId();
        if (SenderId != null) {
            stmt.bindString(2, SenderId);
        }
        stmt.bindLong(3, entity.getReceiverType());
 
        String ReceiverId = entity.getReceiverId();
        if (ReceiverId != null) {
            stmt.bindString(4, ReceiverId);
        }
        stmt.bindLong(5, entity.getMsgType());
 
        String Content = entity.getContent();
        if (Content != null) {
            stmt.bindString(6, Content);
        }
 
        String CreatedTime = entity.getCreatedTime();
        if (CreatedTime != null) {
            stmt.bindString(7, CreatedTime);
        }
        stmt.bindLong(8, entity.getIsFinish());
 
        String FileName = entity.getFileName();
        if (FileName != null) {
            stmt.bindString(9, FileName);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, ICQMessage entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getId());
 
        String SenderId = entity.getSenderId();
        if (SenderId != null) {
            stmt.bindString(2, SenderId);
        }
        stmt.bindLong(3, entity.getReceiverType());
 
        String ReceiverId = entity.getReceiverId();
        if (ReceiverId != null) {
            stmt.bindString(4, ReceiverId);
        }
        stmt.bindLong(5, entity.getMsgType());
 
        String Content = entity.getContent();
        if (Content != null) {
            stmt.bindString(6, Content);
        }
 
        String CreatedTime = entity.getCreatedTime();
        if (CreatedTime != null) {
            stmt.bindString(7, CreatedTime);
        }
        stmt.bindLong(8, entity.getIsFinish());
 
        String FileName = entity.getFileName();
        if (FileName != null) {
            stmt.bindString(9, FileName);
        }
    }

    @Override
    public Integer readKey(Cursor cursor, int offset) {
        return cursor.getInt(offset + 0);
    }    

    @Override
    public ICQMessage readEntity(Cursor cursor, int offset) {
        ICQMessage entity = new ICQMessage( //
            cursor.getInt(offset + 0), // Id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // SenderId
            cursor.getInt(offset + 2), // ReceiverType
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // ReceiverId
            cursor.getInt(offset + 4), // MsgType
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // Content
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // CreatedTime
            cursor.getInt(offset + 7), // IsFinish
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8) // FileName
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, ICQMessage entity, int offset) {
        entity.setId(cursor.getInt(offset + 0));
        entity.setSenderId(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setReceiverType(cursor.getInt(offset + 2));
        entity.setReceiverId(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setMsgType(cursor.getInt(offset + 4));
        entity.setContent(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setCreatedTime(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setIsFinish(cursor.getInt(offset + 7));
        entity.setFileName(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
     }
    
    @Override
    protected final Integer updateKeyAfterInsert(ICQMessage entity, long rowId) {
        return entity.getId();
    }
    
    @Override
    public Integer getKey(ICQMessage entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(ICQMessage entity) {
        throw new UnsupportedOperationException("Unsupported for entities with a non-null key");
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}

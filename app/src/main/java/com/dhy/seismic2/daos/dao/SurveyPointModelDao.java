package com.dhy.seismic2.daos.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.dhy.seismic2.daos.bean.SurveyPointModel;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "SurveyPoint".
*/
public class SurveyPointModelDao extends AbstractDao<SurveyPointModel, String> {

    public static final String TABLENAME = "SurveyPoint";

    /**
     * Properties of entity SurveyPointModel.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property ID = new Property(0, String.class, "ID", true, "ID");
        public final static Property Area = new Property(1, String.class, "area", false, "AREA");
        public final static Property Address = new Property(2, String.class, "address", false, "ADDRESS");
        public final static Property Longitude = new Property(3, double.class, "longitude", false, "LONGITUDE");
        public final static Property Latitude = new Property(4, double.class, "latitude", false, "LATITUDE");
        public final static Property Levels = new Property(5, String.class, "levels", false, "LEVELS");
        public final static Property Description = new Property(6, String.class, "description", false, "DESCRIPTION");
        public final static Property BelongTo = new Property(7, String.class, "belongTo", false, "BELONG_TO");
        public final static Property IsUpload = new Property(8, int.class, "isUpload", false, "IS_UPLOAD");
        public final static Property State = new Property(9, int.class, "State", false, "STATE");
        public final static Property CreateTime = new Property(10, String.class, "createTime", false, "CREATE_TIME");
        public final static Property CreatorId = new Property(11, String.class, "creatorId", false, "CREATOR_ID");
        public final static Property CreatorName = new Property(12, String.class, "creatorName", false, "CREATOR_NAME");
        public final static Property EventHeadId = new Property(13, String.class, "EventHeadId", false, "EVENT_HEAD_ID");
    }


    public SurveyPointModelDao(DaoConfig config) {
        super(config);
    }
    
    public SurveyPointModelDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"SurveyPoint\" (" + //
                "\"ID\" TEXT PRIMARY KEY NOT NULL ," + // 0: ID
                "\"AREA\" TEXT," + // 1: area
                "\"ADDRESS\" TEXT," + // 2: address
                "\"LONGITUDE\" REAL NOT NULL ," + // 3: longitude
                "\"LATITUDE\" REAL NOT NULL ," + // 4: latitude
                "\"LEVELS\" TEXT," + // 5: levels
                "\"DESCRIPTION\" TEXT," + // 6: description
                "\"BELONG_TO\" TEXT," + // 7: belongTo
                "\"IS_UPLOAD\" INTEGER NOT NULL ," + // 8: isUpload
                "\"STATE\" INTEGER NOT NULL ," + // 9: State
                "\"CREATE_TIME\" TEXT," + // 10: createTime
                "\"CREATOR_ID\" TEXT," + // 11: creatorId
                "\"CREATOR_NAME\" TEXT," + // 12: creatorName
                "\"EVENT_HEAD_ID\" TEXT);"); // 13: EventHeadId
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"SurveyPoint\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, SurveyPointModel entity) {
        stmt.clearBindings();
 
        String ID = entity.getID();
        if (ID != null) {
            stmt.bindString(1, ID);
        }
 
        String area = entity.getArea();
        if (area != null) {
            stmt.bindString(2, area);
        }
 
        String address = entity.getAddress();
        if (address != null) {
            stmt.bindString(3, address);
        }
        stmt.bindDouble(4, entity.getLongitude());
        stmt.bindDouble(5, entity.getLatitude());
 
        String levels = entity.getLevels();
        if (levels != null) {
            stmt.bindString(6, levels);
        }
 
        String description = entity.getDescription();
        if (description != null) {
            stmt.bindString(7, description);
        }
 
        String belongTo = entity.getBelongTo();
        if (belongTo != null) {
            stmt.bindString(8, belongTo);
        }
        stmt.bindLong(9, entity.getIsUpload());
        stmt.bindLong(10, entity.getState());
 
        String createTime = entity.getCreateTime();
        if (createTime != null) {
            stmt.bindString(11, createTime);
        }
 
        String creatorId = entity.getCreatorId();
        if (creatorId != null) {
            stmt.bindString(12, creatorId);
        }
 
        String creatorName = entity.getCreatorName();
        if (creatorName != null) {
            stmt.bindString(13, creatorName);
        }
 
        String EventHeadId = entity.getEventHeadId();
        if (EventHeadId != null) {
            stmt.bindString(14, EventHeadId);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, SurveyPointModel entity) {
        stmt.clearBindings();
 
        String ID = entity.getID();
        if (ID != null) {
            stmt.bindString(1, ID);
        }
 
        String area = entity.getArea();
        if (area != null) {
            stmt.bindString(2, area);
        }
 
        String address = entity.getAddress();
        if (address != null) {
            stmt.bindString(3, address);
        }
        stmt.bindDouble(4, entity.getLongitude());
        stmt.bindDouble(5, entity.getLatitude());
 
        String levels = entity.getLevels();
        if (levels != null) {
            stmt.bindString(6, levels);
        }
 
        String description = entity.getDescription();
        if (description != null) {
            stmt.bindString(7, description);
        }
 
        String belongTo = entity.getBelongTo();
        if (belongTo != null) {
            stmt.bindString(8, belongTo);
        }
        stmt.bindLong(9, entity.getIsUpload());
        stmt.bindLong(10, entity.getState());
 
        String createTime = entity.getCreateTime();
        if (createTime != null) {
            stmt.bindString(11, createTime);
        }
 
        String creatorId = entity.getCreatorId();
        if (creatorId != null) {
            stmt.bindString(12, creatorId);
        }
 
        String creatorName = entity.getCreatorName();
        if (creatorName != null) {
            stmt.bindString(13, creatorName);
        }
 
        String EventHeadId = entity.getEventHeadId();
        if (EventHeadId != null) {
            stmt.bindString(14, EventHeadId);
        }
    }

    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0);
    }    

    @Override
    public SurveyPointModel readEntity(Cursor cursor, int offset) {
        SurveyPointModel entity = new SurveyPointModel( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // ID
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // area
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // address
            cursor.getDouble(offset + 3), // longitude
            cursor.getDouble(offset + 4), // latitude
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // levels
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // description
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // belongTo
            cursor.getInt(offset + 8), // isUpload
            cursor.getInt(offset + 9), // State
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // createTime
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // creatorId
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12), // creatorName
            cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13) // EventHeadId
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, SurveyPointModel entity, int offset) {
        entity.setID(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setArea(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setAddress(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setLongitude(cursor.getDouble(offset + 3));
        entity.setLatitude(cursor.getDouble(offset + 4));
        entity.setLevels(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setDescription(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setBelongTo(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setIsUpload(cursor.getInt(offset + 8));
        entity.setState(cursor.getInt(offset + 9));
        entity.setCreateTime(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setCreatorId(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setCreatorName(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
        entity.setEventHeadId(cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13));
     }
    
    @Override
    protected final String updateKeyAfterInsert(SurveyPointModel entity, long rowId) {
        return entity.getID();
    }
    
    @Override
    public String getKey(SurveyPointModel entity) {
        if(entity != null) {
            return entity.getID();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(SurveyPointModel entity) {
        return entity.getID() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}

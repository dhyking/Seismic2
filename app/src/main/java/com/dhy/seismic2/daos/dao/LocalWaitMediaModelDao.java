package com.dhy.seismic2.daos.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.dhy.seismic2.daos.bean.LocalWaitMediaModel;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "LocalWaitSyncMediaFile".
*/
public class LocalWaitMediaModelDao extends AbstractDao<LocalWaitMediaModel, String> {

    public static final String TABLENAME = "LocalWaitSyncMediaFile";

    /**
     * Properties of entity LocalWaitMediaModel.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property FilePath = new Property(0, String.class, "FilePath", true, "FILE_PATH");
        public final static Property SyncType = new Property(1, int.class, "SyncType", false, "SYNC_TYPE");
        public final static Property IsFinish = new Property(2, int.class, "IsFinish", false, "IS_FINISH");
    }


    public LocalWaitMediaModelDao(DaoConfig config) {
        super(config);
    }
    
    public LocalWaitMediaModelDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"LocalWaitSyncMediaFile\" (" + //
                "\"FILE_PATH\" TEXT PRIMARY KEY NOT NULL ," + // 0: FilePath
                "\"SYNC_TYPE\" INTEGER NOT NULL ," + // 1: SyncType
                "\"IS_FINISH\" INTEGER NOT NULL );"); // 2: IsFinish
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"LocalWaitSyncMediaFile\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, LocalWaitMediaModel entity) {
        stmt.clearBindings();
 
        String FilePath = entity.getFilePath();
        if (FilePath != null) {
            stmt.bindString(1, FilePath);
        }
        stmt.bindLong(2, entity.getSyncType());
        stmt.bindLong(3, entity.getIsFinish());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, LocalWaitMediaModel entity) {
        stmt.clearBindings();
 
        String FilePath = entity.getFilePath();
        if (FilePath != null) {
            stmt.bindString(1, FilePath);
        }
        stmt.bindLong(2, entity.getSyncType());
        stmt.bindLong(3, entity.getIsFinish());
    }

    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0);
    }    

    @Override
    public LocalWaitMediaModel readEntity(Cursor cursor, int offset) {
        LocalWaitMediaModel entity = new LocalWaitMediaModel( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // FilePath
            cursor.getInt(offset + 1), // SyncType
            cursor.getInt(offset + 2) // IsFinish
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, LocalWaitMediaModel entity, int offset) {
        entity.setFilePath(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setSyncType(cursor.getInt(offset + 1));
        entity.setIsFinish(cursor.getInt(offset + 2));
     }
    
    @Override
    protected final String updateKeyAfterInsert(LocalWaitMediaModel entity, long rowId) {
        return entity.getFilePath();
    }
    
    @Override
    public String getKey(LocalWaitMediaModel entity) {
        if(entity != null) {
            return entity.getFilePath();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(LocalWaitMediaModel entity) {
        return entity.getFilePath() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}

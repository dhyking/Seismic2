package com.dhy.seismic2.daos.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.dhy.seismic2.daos.bean.HouseSingleModel;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "HouseSingle".
*/
public class HouseSingleModelDao extends AbstractDao<HouseSingleModel, String> {

    public static final String TABLENAME = "HouseSingle";

    /**
     * Properties of entity HouseSingleModel.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property ID = new Property(0, String.class, "ID", true, "ID");
        public final static Property BelongTo = new Property(1, String.class, "belongTo", false, "belongTo");
        public final static Property Area = new Property(2, String.class, "area", false, "area");
        public final static Property Address = new Property(3, String.class, "address", false, "address");
        public final static Property Longitude = new Property(4, double.class, "longitude", false, "longitude");
        public final static Property Latitude = new Property(5, double.class, "latitude", false, "latitude");
        public final static Property Type = new Property(6, String.class, "type", false, "type");
        public final static Property Struct = new Property(7, String.class, "struct", false, "struct");
        public final static Property Levels = new Property(8, String.class, "levels", false, "levels");
        public final static Property Acreage = new Property(9, float.class, "acreage", false, "acreage");
        public final static Property Count = new Property(10, int.class, "count", false, "count");
        public final static Property Per = new Property(11, float.class, "per", false, "per");
        public final static Property Total = new Property(12, float.class, "total", false, "total");
        public final static Property Description = new Property(13, String.class, "description", false, "description");
        public final static Property IsUpload = new Property(14, int.class, "isUpload", false, "isUpload");
        public final static Property State = new Property(15, int.class, "State", false, "State");
        public final static Property EventHeadId = new Property(16, String.class, "EventHeadId", false, "EventHeadId");
        public final static Property InquirerId = new Property(17, String.class, "inquirerId", false, "inquirerId");
        public final static Property InquirerName = new Property(18, String.class, "inquirerName", false, "inquirerName");
        public final static Property InquirerTime = new Property(19, String.class, "inquirerTime", false, "inquirerTime");
    }


    public HouseSingleModelDao(DaoConfig config) {
        super(config);
    }
    
    public HouseSingleModelDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"HouseSingle\" (" + //
                "\"ID\" TEXT PRIMARY KEY NOT NULL ," + // 0: ID
                "\"belongTo\" TEXT," + // 1: belongTo
                "\"area\" TEXT," + // 2: area
                "\"address\" TEXT," + // 3: address
                "\"longitude\" REAL NOT NULL ," + // 4: longitude
                "\"latitude\" REAL NOT NULL ," + // 5: latitude
                "\"type\" TEXT," + // 6: type
                "\"struct\" TEXT," + // 7: struct
                "\"levels\" TEXT," + // 8: levels
                "\"acreage\" REAL NOT NULL ," + // 9: acreage
                "\"count\" INTEGER NOT NULL ," + // 10: count
                "\"per\" REAL NOT NULL ," + // 11: per
                "\"total\" REAL NOT NULL ," + // 12: total
                "\"description\" TEXT," + // 13: description
                "\"isUpload\" INTEGER NOT NULL ," + // 14: isUpload
                "\"State\" INTEGER NOT NULL ," + // 15: State
                "\"EventHeadId\" TEXT," + // 16: EventHeadId
                "\"inquirerId\" TEXT," + // 17: inquirerId
                "\"inquirerName\" TEXT," + // 18: inquirerName
                "\"inquirerTime\" TEXT);"); // 19: inquirerTime
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"HouseSingle\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, HouseSingleModel entity) {
        stmt.clearBindings();
 
        String ID = entity.getID();
        if (ID != null) {
            stmt.bindString(1, ID);
        }
 
        String belongTo = entity.getBelongTo();
        if (belongTo != null) {
            stmt.bindString(2, belongTo);
        }
 
        String area = entity.getArea();
        if (area != null) {
            stmt.bindString(3, area);
        }
 
        String address = entity.getAddress();
        if (address != null) {
            stmt.bindString(4, address);
        }
        stmt.bindDouble(5, entity.getLongitude());
        stmt.bindDouble(6, entity.getLatitude());
 
        String type = entity.getType();
        if (type != null) {
            stmt.bindString(7, type);
        }
 
        String struct = entity.getStruct();
        if (struct != null) {
            stmt.bindString(8, struct);
        }
 
        String levels = entity.getLevels();
        if (levels != null) {
            stmt.bindString(9, levels);
        }
        stmt.bindDouble(10, entity.getAcreage());
        stmt.bindLong(11, entity.getCount());
        stmt.bindDouble(12, entity.getPer());
        stmt.bindDouble(13, entity.getTotal());
 
        String description = entity.getDescription();
        if (description != null) {
            stmt.bindString(14, description);
        }
        stmt.bindLong(15, entity.getIsUpload());
        stmt.bindLong(16, entity.getState());
 
        String EventHeadId = entity.getEventHeadId();
        if (EventHeadId != null) {
            stmt.bindString(17, EventHeadId);
        }
 
        String inquirerId = entity.getInquirerId();
        if (inquirerId != null) {
            stmt.bindString(18, inquirerId);
        }
 
        String inquirerName = entity.getInquirerName();
        if (inquirerName != null) {
            stmt.bindString(19, inquirerName);
        }
 
        String inquirerTime = entity.getInquirerTime();
        if (inquirerTime != null) {
            stmt.bindString(20, inquirerTime);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, HouseSingleModel entity) {
        stmt.clearBindings();
 
        String ID = entity.getID();
        if (ID != null) {
            stmt.bindString(1, ID);
        }
 
        String belongTo = entity.getBelongTo();
        if (belongTo != null) {
            stmt.bindString(2, belongTo);
        }
 
        String area = entity.getArea();
        if (area != null) {
            stmt.bindString(3, area);
        }
 
        String address = entity.getAddress();
        if (address != null) {
            stmt.bindString(4, address);
        }
        stmt.bindDouble(5, entity.getLongitude());
        stmt.bindDouble(6, entity.getLatitude());
 
        String type = entity.getType();
        if (type != null) {
            stmt.bindString(7, type);
        }
 
        String struct = entity.getStruct();
        if (struct != null) {
            stmt.bindString(8, struct);
        }
 
        String levels = entity.getLevels();
        if (levels != null) {
            stmt.bindString(9, levels);
        }
        stmt.bindDouble(10, entity.getAcreage());
        stmt.bindLong(11, entity.getCount());
        stmt.bindDouble(12, entity.getPer());
        stmt.bindDouble(13, entity.getTotal());
 
        String description = entity.getDescription();
        if (description != null) {
            stmt.bindString(14, description);
        }
        stmt.bindLong(15, entity.getIsUpload());
        stmt.bindLong(16, entity.getState());
 
        String EventHeadId = entity.getEventHeadId();
        if (EventHeadId != null) {
            stmt.bindString(17, EventHeadId);
        }
 
        String inquirerId = entity.getInquirerId();
        if (inquirerId != null) {
            stmt.bindString(18, inquirerId);
        }
 
        String inquirerName = entity.getInquirerName();
        if (inquirerName != null) {
            stmt.bindString(19, inquirerName);
        }
 
        String inquirerTime = entity.getInquirerTime();
        if (inquirerTime != null) {
            stmt.bindString(20, inquirerTime);
        }
    }

    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0);
    }    

    @Override
    public HouseSingleModel readEntity(Cursor cursor, int offset) {
        HouseSingleModel entity = new HouseSingleModel( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // ID
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // belongTo
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // area
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // address
            cursor.getDouble(offset + 4), // longitude
            cursor.getDouble(offset + 5), // latitude
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // type
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // struct
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // levels
            cursor.getFloat(offset + 9), // acreage
            cursor.getInt(offset + 10), // count
            cursor.getFloat(offset + 11), // per
            cursor.getFloat(offset + 12), // total
            cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13), // description
            cursor.getInt(offset + 14), // isUpload
            cursor.getInt(offset + 15), // State
            cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16), // EventHeadId
            cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17), // inquirerId
            cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18), // inquirerName
            cursor.isNull(offset + 19) ? null : cursor.getString(offset + 19) // inquirerTime
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, HouseSingleModel entity, int offset) {
        entity.setID(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setBelongTo(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setArea(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setAddress(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setLongitude(cursor.getDouble(offset + 4));
        entity.setLatitude(cursor.getDouble(offset + 5));
        entity.setType(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setStruct(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setLevels(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setAcreage(cursor.getFloat(offset + 9));
        entity.setCount(cursor.getInt(offset + 10));
        entity.setPer(cursor.getFloat(offset + 11));
        entity.setTotal(cursor.getFloat(offset + 12));
        entity.setDescription(cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13));
        entity.setIsUpload(cursor.getInt(offset + 14));
        entity.setState(cursor.getInt(offset + 15));
        entity.setEventHeadId(cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16));
        entity.setInquirerId(cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17));
        entity.setInquirerName(cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18));
        entity.setInquirerTime(cursor.isNull(offset + 19) ? null : cursor.getString(offset + 19));
     }
    
    @Override
    protected final String updateKeyAfterInsert(HouseSingleModel entity, long rowId) {
        return entity.getID();
    }
    
    @Override
    public String getKey(HouseSingleModel entity) {
        if(entity != null) {
            return entity.getID();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(HouseSingleModel entity) {
        return entity.getID() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}

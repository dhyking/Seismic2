package com.dhy.seismic2.daos.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.dhy.seismic2.daos.bean.PointInfoModel;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "EVENTRANGEITEM".
*/
public class PointInfoModelDao extends AbstractDao<PointInfoModel, String> {

    public static final String TABLENAME = "EVENTRANGEITEM";

    /**
     * Properties of entity PointInfoModel.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property ID = new Property(0, String.class, "ID", true, "ID");
        public final static Property EVENTHEADID = new Property(1, String.class, "EVENTHEADID", false, "EVENTHEADID");
        public final static Property SPACETYPE = new Property(2, String.class, "SPACETYPE", false, "SPACETYPE");
        public final static Property REGIONCODE = new Property(3, String.class, "REGIONCODE", false, "REGIONCODE");
        public final static Property X = new Property(4, double.class, "X", false, "X");
        public final static Property Y = new Property(5, double.class, "Y", false, "Y");
        public final static Property POSITION = new Property(6, String.class, "POSITION", false, "POSITION");
    }


    public PointInfoModelDao(DaoConfig config) {
        super(config);
    }
    
    public PointInfoModelDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"EVENTRANGEITEM\" (" + //
                "\"ID\" TEXT PRIMARY KEY NOT NULL ," + // 0: ID
                "\"EVENTHEADID\" TEXT," + // 1: EVENTHEADID
                "\"SPACETYPE\" TEXT," + // 2: SPACETYPE
                "\"REGIONCODE\" TEXT," + // 3: REGIONCODE
                "\"X\" REAL NOT NULL ," + // 4: X
                "\"Y\" REAL NOT NULL ," + // 5: Y
                "\"POSITION\" TEXT);"); // 6: POSITION
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"EVENTRANGEITEM\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, PointInfoModel entity) {
        stmt.clearBindings();
 
        String ID = entity.getID();
        if (ID != null) {
            stmt.bindString(1, ID);
        }
 
        String EVENTHEADID = entity.getEVENTHEADID();
        if (EVENTHEADID != null) {
            stmt.bindString(2, EVENTHEADID);
        }
 
        String SPACETYPE = entity.getSPACETYPE();
        if (SPACETYPE != null) {
            stmt.bindString(3, SPACETYPE);
        }
 
        String REGIONCODE = entity.getREGIONCODE();
        if (REGIONCODE != null) {
            stmt.bindString(4, REGIONCODE);
        }
        stmt.bindDouble(5, entity.getX());
        stmt.bindDouble(6, entity.getY());
 
        String POSITION = entity.getPOSITION();
        if (POSITION != null) {
            stmt.bindString(7, POSITION);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, PointInfoModel entity) {
        stmt.clearBindings();
 
        String ID = entity.getID();
        if (ID != null) {
            stmt.bindString(1, ID);
        }
 
        String EVENTHEADID = entity.getEVENTHEADID();
        if (EVENTHEADID != null) {
            stmt.bindString(2, EVENTHEADID);
        }
 
        String SPACETYPE = entity.getSPACETYPE();
        if (SPACETYPE != null) {
            stmt.bindString(3, SPACETYPE);
        }
 
        String REGIONCODE = entity.getREGIONCODE();
        if (REGIONCODE != null) {
            stmt.bindString(4, REGIONCODE);
        }
        stmt.bindDouble(5, entity.getX());
        stmt.bindDouble(6, entity.getY());
 
        String POSITION = entity.getPOSITION();
        if (POSITION != null) {
            stmt.bindString(7, POSITION);
        }
    }

    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0);
    }    

    @Override
    public PointInfoModel readEntity(Cursor cursor, int offset) {
        PointInfoModel entity = new PointInfoModel( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // ID
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // EVENTHEADID
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // SPACETYPE
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // REGIONCODE
            cursor.getDouble(offset + 4), // X
            cursor.getDouble(offset + 5), // Y
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6) // POSITION
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, PointInfoModel entity, int offset) {
        entity.setID(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setEVENTHEADID(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setSPACETYPE(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setREGIONCODE(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setX(cursor.getDouble(offset + 4));
        entity.setY(cursor.getDouble(offset + 5));
        entity.setPOSITION(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
     }
    
    @Override
    protected final String updateKeyAfterInsert(PointInfoModel entity, long rowId) {
        return entity.getID();
    }
    
    @Override
    public String getKey(PointInfoModel entity) {
        if(entity != null) {
            return entity.getID();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(PointInfoModel entity) {
        return entity.getID() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}

package com.dhy.seismic2.daos.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.dhy.seismic2.daos.bean.FastCollectModel;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "FastCollect".
*/
public class FastCollectModelDao extends AbstractDao<FastCollectModel, String> {

    public static final String TABLENAME = "FastCollect";

    /**
     * Properties of entity FastCollectModel.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property ID = new Property(0, String.class, "ID", true, "ID");
        public final static Property Longitude = new Property(1, double.class, "Longitude", false, "LONGITUDE");
        public final static Property Latitude = new Property(2, double.class, "Latitude", false, "LATITUDE");
        public final static Property Address = new Property(3, String.class, "Address", false, "ADDRESS");
        public final static Property CreatorId = new Property(4, String.class, "CreatorId", false, "CREATOR_ID");
        public final static Property CreatorName = new Property(5, String.class, "CreatorName", false, "CREATOR_NAME");
        public final static Property CreateTime = new Property(6, String.class, "CreateTime", false, "CREATE_TIME");
        public final static Property IsUpload = new Property(7, int.class, "IsUpload", false, "IS_UPLOAD");
        public final static Property PublicType = new Property(8, int.class, "PublicType", false, "PUBLIC_TYPE");
        public final static Property Description = new Property(9, String.class, "Description", false, "DESCRIPTION");
        public final static Property EventHeadId = new Property(10, String.class, "EventHeadId", false, "EVENT_HEAD_ID");
    }


    public FastCollectModelDao(DaoConfig config) {
        super(config);
    }
    
    public FastCollectModelDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"FastCollect\" (" + //
                "\"ID\" TEXT PRIMARY KEY NOT NULL ," + // 0: ID
                "\"LONGITUDE\" REAL NOT NULL ," + // 1: Longitude
                "\"LATITUDE\" REAL NOT NULL ," + // 2: Latitude
                "\"ADDRESS\" TEXT," + // 3: Address
                "\"CREATOR_ID\" TEXT," + // 4: CreatorId
                "\"CREATOR_NAME\" TEXT," + // 5: CreatorName
                "\"CREATE_TIME\" TEXT," + // 6: CreateTime
                "\"IS_UPLOAD\" INTEGER NOT NULL ," + // 7: IsUpload
                "\"PUBLIC_TYPE\" INTEGER NOT NULL ," + // 8: PublicType
                "\"DESCRIPTION\" TEXT," + // 9: Description
                "\"EVENT_HEAD_ID\" TEXT);"); // 10: EventHeadId
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"FastCollect\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, FastCollectModel entity) {
        stmt.clearBindings();
 
        String ID = entity.getID();
        if (ID != null) {
            stmt.bindString(1, ID);
        }
        stmt.bindDouble(2, entity.getLongitude());
        stmt.bindDouble(3, entity.getLatitude());
 
        String Address = entity.getAddress();
        if (Address != null) {
            stmt.bindString(4, Address);
        }
 
        String CreatorId = entity.getCreatorId();
        if (CreatorId != null) {
            stmt.bindString(5, CreatorId);
        }
 
        String CreatorName = entity.getCreatorName();
        if (CreatorName != null) {
            stmt.bindString(6, CreatorName);
        }
 
        String CreateTime = entity.getCreateTime();
        if (CreateTime != null) {
            stmt.bindString(7, CreateTime);
        }
        stmt.bindLong(8, entity.getIsUpload());
        stmt.bindLong(9, entity.getPublicType());
 
        String Description = entity.getDescription();
        if (Description != null) {
            stmt.bindString(10, Description);
        }
 
        String EventHeadId = entity.getEventHeadId();
        if (EventHeadId != null) {
            stmt.bindString(11, EventHeadId);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, FastCollectModel entity) {
        stmt.clearBindings();
 
        String ID = entity.getID();
        if (ID != null) {
            stmt.bindString(1, ID);
        }
        stmt.bindDouble(2, entity.getLongitude());
        stmt.bindDouble(3, entity.getLatitude());
 
        String Address = entity.getAddress();
        if (Address != null) {
            stmt.bindString(4, Address);
        }
 
        String CreatorId = entity.getCreatorId();
        if (CreatorId != null) {
            stmt.bindString(5, CreatorId);
        }
 
        String CreatorName = entity.getCreatorName();
        if (CreatorName != null) {
            stmt.bindString(6, CreatorName);
        }
 
        String CreateTime = entity.getCreateTime();
        if (CreateTime != null) {
            stmt.bindString(7, CreateTime);
        }
        stmt.bindLong(8, entity.getIsUpload());
        stmt.bindLong(9, entity.getPublicType());
 
        String Description = entity.getDescription();
        if (Description != null) {
            stmt.bindString(10, Description);
        }
 
        String EventHeadId = entity.getEventHeadId();
        if (EventHeadId != null) {
            stmt.bindString(11, EventHeadId);
        }
    }

    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0);
    }    

    @Override
    public FastCollectModel readEntity(Cursor cursor, int offset) {
        FastCollectModel entity = new FastCollectModel( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // ID
            cursor.getDouble(offset + 1), // Longitude
            cursor.getDouble(offset + 2), // Latitude
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // Address
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // CreatorId
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // CreatorName
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // CreateTime
            cursor.getInt(offset + 7), // IsUpload
            cursor.getInt(offset + 8), // PublicType
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // Description
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10) // EventHeadId
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, FastCollectModel entity, int offset) {
        entity.setID(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setLongitude(cursor.getDouble(offset + 1));
        entity.setLatitude(cursor.getDouble(offset + 2));
        entity.setAddress(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setCreatorId(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setCreatorName(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setCreateTime(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setIsUpload(cursor.getInt(offset + 7));
        entity.setPublicType(cursor.getInt(offset + 8));
        entity.setDescription(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setEventHeadId(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
     }
    
    @Override
    protected final String updateKeyAfterInsert(FastCollectModel entity, long rowId) {
        return entity.getID();
    }
    
    @Override
    public String getKey(FastCollectModel entity) {
        if(entity != null) {
            return entity.getID();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(FastCollectModel entity) {
        return entity.getID() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}

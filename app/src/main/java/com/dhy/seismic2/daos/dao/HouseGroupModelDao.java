package com.dhy.seismic2.daos.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.dhy.seismic2.daos.bean.HouseGroupModel;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "HouseGroup".
*/
public class HouseGroupModelDao extends AbstractDao<HouseGroupModel, String> {

    public static final String TABLENAME = "HouseGroup";

    /**
     * Properties of entity HouseGroupModel.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property ID = new Property(0, String.class, "ID", true, "ID");
        public final static Property BelongTo = new Property(1, String.class, "belongTo", false, "belongTo");
        public final static Property Type = new Property(2, int.class, "type", false, "type");
        public final static Property SteelDestroy = new Property(3, double.class, "steelDestroy", false, "steelDestroy");
        public final static Property SteelSeriousDamage = new Property(4, double.class, "steelSeriousDamage", false, "steelSeriousDamage");
        public final static Property SteelDamage = new Property(5, double.class, "steelDamage", false, "steelDamage");
        public final static Property SteelSlightDamage = new Property(6, double.class, "steelSlightDamage", false, "steelSlightDamage");
        public final static Property SteelBasicGood = new Property(7, double.class, "steelBasicGood", false, "steelBasicGood");
        public final static Property DefensiveBrickDestroy = new Property(8, double.class, "defensiveBrickDestroy", false, "defensiveBrickDestroy");
        public final static Property DefensiveBrickSeriousDamage = new Property(9, double.class, "defensiveBrickSeriousDamage", false, "defensiveBrickSeriousDamage");
        public final static Property DefensiveBrickDamage = new Property(10, double.class, "defensiveBrickDamage", false, "defensiveBrickDamage");
        public final static Property DefensiveBrickSlightDamage = new Property(11, double.class, "defensiveBrickSlightDamage", false, "defensiveBrickSlightDamage");
        public final static Property DefensiveBrickBasicGood = new Property(12, double.class, "defensiveBrickBasicGood", false, "defensiveBrickBasicGood");
        public final static Property BrickDestroy = new Property(13, double.class, "brickDestroy", false, "brickDestroy");
        public final static Property BrickSeriousDamage = new Property(14, double.class, "brickSeriousDamage", false, "brickSeriousDamage");
        public final static Property BrickDamage = new Property(15, double.class, "brickDamage", false, "brickDamage");
        public final static Property BrickSlightDamage = new Property(16, double.class, "brickSlightDamage", false, "brickSlightDamage");
        public final static Property BrickBasicGood = new Property(17, double.class, "brickBasicGood", false, "brickBasicGood");
        public final static Property StockDestroy = new Property(18, double.class, "stockDestroy", false, "stockDestroy");
        public final static Property StockSeriousDamage = new Property(19, double.class, "stockSeriousDamage", false, "stockSeriousDamage");
        public final static Property StockDamage = new Property(20, double.class, "stockDamage", false, "stockDamage");
        public final static Property StockSlightDamage = new Property(21, double.class, "stockSlightDamage", false, "stockSlightDamage");
        public final static Property StockBasicGood = new Property(22, double.class, "stockBasicGood", false, "stockBasicGood");
        public final static Property CivilDestroy = new Property(23, double.class, "civilDestroy", false, "civilDestroy");
        public final static Property CivilSeriousDamage = new Property(24, double.class, "civilSeriousDamage", false, "civilSeriousDamage");
        public final static Property CivilDamage = new Property(25, double.class, "civilDamage", false, "civilDamage");
        public final static Property CivilSlightDamage = new Property(26, double.class, "civilSlightDamage", false, "civilSlightDamage");
        public final static Property CivilBasicGood = new Property(27, double.class, "civilBasicGood", false, "civilBasicGood");
        public final static Property OtherDestroy = new Property(28, double.class, "otherDestroy", false, "otherDestroy");
        public final static Property OtherSeriousDamage = new Property(29, double.class, "otherSeriousDamage", false, "otherSeriousDamage");
        public final static Property OtherDamage = new Property(30, double.class, "otherDamage", false, "otherDamage");
        public final static Property OtherSlightDamage = new Property(31, double.class, "otherSlightDamage", false, "otherSlightDamage");
        public final static Property OtherBasicGood = new Property(32, double.class, "otherBasicGood", false, "otherBasicGood");
        public final static Property IsUpload = new Property(33, int.class, "isUpload", false, "isUpload");
        public final static Property State = new Property(34, int.class, "State", false, "State");
        public final static Property INQUIRERID = new Property(35, String.class, "INQUIRERID", false, "INQUIRERID");
        public final static Property INQUIRERNAME = new Property(36, String.class, "INQUIRERNAME", false, "INQUIRERNAME");
        public final static Property INQUIRERTIME = new Property(37, String.class, "INQUIRERTIME", false, "INQUIRERTIME");
        public final static Property EventHeadId = new Property(38, String.class, "EventHeadId", false, "EventHeadId");
    }


    public HouseGroupModelDao(DaoConfig config) {
        super(config);
    }
    
    public HouseGroupModelDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"HouseGroup\" (" + //
                "\"ID\" TEXT PRIMARY KEY NOT NULL ," + // 0: ID
                "\"belongTo\" TEXT," + // 1: belongTo
                "\"type\" INTEGER NOT NULL ," + // 2: type
                "\"steelDestroy\" REAL NOT NULL ," + // 3: steelDestroy
                "\"steelSeriousDamage\" REAL NOT NULL ," + // 4: steelSeriousDamage
                "\"steelDamage\" REAL NOT NULL ," + // 5: steelDamage
                "\"steelSlightDamage\" REAL NOT NULL ," + // 6: steelSlightDamage
                "\"steelBasicGood\" REAL NOT NULL ," + // 7: steelBasicGood
                "\"defensiveBrickDestroy\" REAL NOT NULL ," + // 8: defensiveBrickDestroy
                "\"defensiveBrickSeriousDamage\" REAL NOT NULL ," + // 9: defensiveBrickSeriousDamage
                "\"defensiveBrickDamage\" REAL NOT NULL ," + // 10: defensiveBrickDamage
                "\"defensiveBrickSlightDamage\" REAL NOT NULL ," + // 11: defensiveBrickSlightDamage
                "\"defensiveBrickBasicGood\" REAL NOT NULL ," + // 12: defensiveBrickBasicGood
                "\"brickDestroy\" REAL NOT NULL ," + // 13: brickDestroy
                "\"brickSeriousDamage\" REAL NOT NULL ," + // 14: brickSeriousDamage
                "\"brickDamage\" REAL NOT NULL ," + // 15: brickDamage
                "\"brickSlightDamage\" REAL NOT NULL ," + // 16: brickSlightDamage
                "\"brickBasicGood\" REAL NOT NULL ," + // 17: brickBasicGood
                "\"stockDestroy\" REAL NOT NULL ," + // 18: stockDestroy
                "\"stockSeriousDamage\" REAL NOT NULL ," + // 19: stockSeriousDamage
                "\"stockDamage\" REAL NOT NULL ," + // 20: stockDamage
                "\"stockSlightDamage\" REAL NOT NULL ," + // 21: stockSlightDamage
                "\"stockBasicGood\" REAL NOT NULL ," + // 22: stockBasicGood
                "\"civilDestroy\" REAL NOT NULL ," + // 23: civilDestroy
                "\"civilSeriousDamage\" REAL NOT NULL ," + // 24: civilSeriousDamage
                "\"civilDamage\" REAL NOT NULL ," + // 25: civilDamage
                "\"civilSlightDamage\" REAL NOT NULL ," + // 26: civilSlightDamage
                "\"civilBasicGood\" REAL NOT NULL ," + // 27: civilBasicGood
                "\"otherDestroy\" REAL NOT NULL ," + // 28: otherDestroy
                "\"otherSeriousDamage\" REAL NOT NULL ," + // 29: otherSeriousDamage
                "\"otherDamage\" REAL NOT NULL ," + // 30: otherDamage
                "\"otherSlightDamage\" REAL NOT NULL ," + // 31: otherSlightDamage
                "\"otherBasicGood\" REAL NOT NULL ," + // 32: otherBasicGood
                "\"isUpload\" INTEGER NOT NULL ," + // 33: isUpload
                "\"State\" INTEGER NOT NULL ," + // 34: State
                "\"INQUIRERID\" TEXT," + // 35: INQUIRERID
                "\"INQUIRERNAME\" TEXT," + // 36: INQUIRERNAME
                "\"INQUIRERTIME\" TEXT," + // 37: INQUIRERTIME
                "\"EventHeadId\" TEXT);"); // 38: EventHeadId
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"HouseGroup\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, HouseGroupModel entity) {
        stmt.clearBindings();
 
        String ID = entity.getID();
        if (ID != null) {
            stmt.bindString(1, ID);
        }
 
        String belongTo = entity.getBelongTo();
        if (belongTo != null) {
            stmt.bindString(2, belongTo);
        }
        stmt.bindLong(3, entity.getType());
        stmt.bindDouble(4, entity.getSteelDestroy());
        stmt.bindDouble(5, entity.getSteelSeriousDamage());
        stmt.bindDouble(6, entity.getSteelDamage());
        stmt.bindDouble(7, entity.getSteelSlightDamage());
        stmt.bindDouble(8, entity.getSteelBasicGood());
        stmt.bindDouble(9, entity.getDefensiveBrickDestroy());
        stmt.bindDouble(10, entity.getDefensiveBrickSeriousDamage());
        stmt.bindDouble(11, entity.getDefensiveBrickDamage());
        stmt.bindDouble(12, entity.getDefensiveBrickSlightDamage());
        stmt.bindDouble(13, entity.getDefensiveBrickBasicGood());
        stmt.bindDouble(14, entity.getBrickDestroy());
        stmt.bindDouble(15, entity.getBrickSeriousDamage());
        stmt.bindDouble(16, entity.getBrickDamage());
        stmt.bindDouble(17, entity.getBrickSlightDamage());
        stmt.bindDouble(18, entity.getBrickBasicGood());
        stmt.bindDouble(19, entity.getStockDestroy());
        stmt.bindDouble(20, entity.getStockSeriousDamage());
        stmt.bindDouble(21, entity.getStockDamage());
        stmt.bindDouble(22, entity.getStockSlightDamage());
        stmt.bindDouble(23, entity.getStockBasicGood());
        stmt.bindDouble(24, entity.getCivilDestroy());
        stmt.bindDouble(25, entity.getCivilSeriousDamage());
        stmt.bindDouble(26, entity.getCivilDamage());
        stmt.bindDouble(27, entity.getCivilSlightDamage());
        stmt.bindDouble(28, entity.getCivilBasicGood());
        stmt.bindDouble(29, entity.getOtherDestroy());
        stmt.bindDouble(30, entity.getOtherSeriousDamage());
        stmt.bindDouble(31, entity.getOtherDamage());
        stmt.bindDouble(32, entity.getOtherSlightDamage());
        stmt.bindDouble(33, entity.getOtherBasicGood());
        stmt.bindLong(34, entity.getIsUpload());
        stmt.bindLong(35, entity.getState());
 
        String INQUIRERID = entity.getINQUIRERID();
        if (INQUIRERID != null) {
            stmt.bindString(36, INQUIRERID);
        }
 
        String INQUIRERNAME = entity.getINQUIRERNAME();
        if (INQUIRERNAME != null) {
            stmt.bindString(37, INQUIRERNAME);
        }
 
        String INQUIRERTIME = entity.getINQUIRERTIME();
        if (INQUIRERTIME != null) {
            stmt.bindString(38, INQUIRERTIME);
        }
 
        String EventHeadId = entity.getEventHeadId();
        if (EventHeadId != null) {
            stmt.bindString(39, EventHeadId);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, HouseGroupModel entity) {
        stmt.clearBindings();
 
        String ID = entity.getID();
        if (ID != null) {
            stmt.bindString(1, ID);
        }
 
        String belongTo = entity.getBelongTo();
        if (belongTo != null) {
            stmt.bindString(2, belongTo);
        }
        stmt.bindLong(3, entity.getType());
        stmt.bindDouble(4, entity.getSteelDestroy());
        stmt.bindDouble(5, entity.getSteelSeriousDamage());
        stmt.bindDouble(6, entity.getSteelDamage());
        stmt.bindDouble(7, entity.getSteelSlightDamage());
        stmt.bindDouble(8, entity.getSteelBasicGood());
        stmt.bindDouble(9, entity.getDefensiveBrickDestroy());
        stmt.bindDouble(10, entity.getDefensiveBrickSeriousDamage());
        stmt.bindDouble(11, entity.getDefensiveBrickDamage());
        stmt.bindDouble(12, entity.getDefensiveBrickSlightDamage());
        stmt.bindDouble(13, entity.getDefensiveBrickBasicGood());
        stmt.bindDouble(14, entity.getBrickDestroy());
        stmt.bindDouble(15, entity.getBrickSeriousDamage());
        stmt.bindDouble(16, entity.getBrickDamage());
        stmt.bindDouble(17, entity.getBrickSlightDamage());
        stmt.bindDouble(18, entity.getBrickBasicGood());
        stmt.bindDouble(19, entity.getStockDestroy());
        stmt.bindDouble(20, entity.getStockSeriousDamage());
        stmt.bindDouble(21, entity.getStockDamage());
        stmt.bindDouble(22, entity.getStockSlightDamage());
        stmt.bindDouble(23, entity.getStockBasicGood());
        stmt.bindDouble(24, entity.getCivilDestroy());
        stmt.bindDouble(25, entity.getCivilSeriousDamage());
        stmt.bindDouble(26, entity.getCivilDamage());
        stmt.bindDouble(27, entity.getCivilSlightDamage());
        stmt.bindDouble(28, entity.getCivilBasicGood());
        stmt.bindDouble(29, entity.getOtherDestroy());
        stmt.bindDouble(30, entity.getOtherSeriousDamage());
        stmt.bindDouble(31, entity.getOtherDamage());
        stmt.bindDouble(32, entity.getOtherSlightDamage());
        stmt.bindDouble(33, entity.getOtherBasicGood());
        stmt.bindLong(34, entity.getIsUpload());
        stmt.bindLong(35, entity.getState());
 
        String INQUIRERID = entity.getINQUIRERID();
        if (INQUIRERID != null) {
            stmt.bindString(36, INQUIRERID);
        }
 
        String INQUIRERNAME = entity.getINQUIRERNAME();
        if (INQUIRERNAME != null) {
            stmt.bindString(37, INQUIRERNAME);
        }
 
        String INQUIRERTIME = entity.getINQUIRERTIME();
        if (INQUIRERTIME != null) {
            stmt.bindString(38, INQUIRERTIME);
        }
 
        String EventHeadId = entity.getEventHeadId();
        if (EventHeadId != null) {
            stmt.bindString(39, EventHeadId);
        }
    }

    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0);
    }    

    @Override
    public HouseGroupModel readEntity(Cursor cursor, int offset) {
        HouseGroupModel entity = new HouseGroupModel( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // ID
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // belongTo
            cursor.getInt(offset + 2), // type
            cursor.getDouble(offset + 3), // steelDestroy
            cursor.getDouble(offset + 4), // steelSeriousDamage
            cursor.getDouble(offset + 5), // steelDamage
            cursor.getDouble(offset + 6), // steelSlightDamage
            cursor.getDouble(offset + 7), // steelBasicGood
            cursor.getDouble(offset + 8), // defensiveBrickDestroy
            cursor.getDouble(offset + 9), // defensiveBrickSeriousDamage
            cursor.getDouble(offset + 10), // defensiveBrickDamage
            cursor.getDouble(offset + 11), // defensiveBrickSlightDamage
            cursor.getDouble(offset + 12), // defensiveBrickBasicGood
            cursor.getDouble(offset + 13), // brickDestroy
            cursor.getDouble(offset + 14), // brickSeriousDamage
            cursor.getDouble(offset + 15), // brickDamage
            cursor.getDouble(offset + 16), // brickSlightDamage
            cursor.getDouble(offset + 17), // brickBasicGood
            cursor.getDouble(offset + 18), // stockDestroy
            cursor.getDouble(offset + 19), // stockSeriousDamage
            cursor.getDouble(offset + 20), // stockDamage
            cursor.getDouble(offset + 21), // stockSlightDamage
            cursor.getDouble(offset + 22), // stockBasicGood
            cursor.getDouble(offset + 23), // civilDestroy
            cursor.getDouble(offset + 24), // civilSeriousDamage
            cursor.getDouble(offset + 25), // civilDamage
            cursor.getDouble(offset + 26), // civilSlightDamage
            cursor.getDouble(offset + 27), // civilBasicGood
            cursor.getDouble(offset + 28), // otherDestroy
            cursor.getDouble(offset + 29), // otherSeriousDamage
            cursor.getDouble(offset + 30), // otherDamage
            cursor.getDouble(offset + 31), // otherSlightDamage
            cursor.getDouble(offset + 32), // otherBasicGood
            cursor.getInt(offset + 33), // isUpload
            cursor.getInt(offset + 34), // State
            cursor.isNull(offset + 35) ? null : cursor.getString(offset + 35), // INQUIRERID
            cursor.isNull(offset + 36) ? null : cursor.getString(offset + 36), // INQUIRERNAME
            cursor.isNull(offset + 37) ? null : cursor.getString(offset + 37), // INQUIRERTIME
            cursor.isNull(offset + 38) ? null : cursor.getString(offset + 38) // EventHeadId
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, HouseGroupModel entity, int offset) {
        entity.setID(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setBelongTo(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setType(cursor.getInt(offset + 2));
        entity.setSteelDestroy(cursor.getDouble(offset + 3));
        entity.setSteelSeriousDamage(cursor.getDouble(offset + 4));
        entity.setSteelDamage(cursor.getDouble(offset + 5));
        entity.setSteelSlightDamage(cursor.getDouble(offset + 6));
        entity.setSteelBasicGood(cursor.getDouble(offset + 7));
        entity.setDefensiveBrickDestroy(cursor.getDouble(offset + 8));
        entity.setDefensiveBrickSeriousDamage(cursor.getDouble(offset + 9));
        entity.setDefensiveBrickDamage(cursor.getDouble(offset + 10));
        entity.setDefensiveBrickSlightDamage(cursor.getDouble(offset + 11));
        entity.setDefensiveBrickBasicGood(cursor.getDouble(offset + 12));
        entity.setBrickDestroy(cursor.getDouble(offset + 13));
        entity.setBrickSeriousDamage(cursor.getDouble(offset + 14));
        entity.setBrickDamage(cursor.getDouble(offset + 15));
        entity.setBrickSlightDamage(cursor.getDouble(offset + 16));
        entity.setBrickBasicGood(cursor.getDouble(offset + 17));
        entity.setStockDestroy(cursor.getDouble(offset + 18));
        entity.setStockSeriousDamage(cursor.getDouble(offset + 19));
        entity.setStockDamage(cursor.getDouble(offset + 20));
        entity.setStockSlightDamage(cursor.getDouble(offset + 21));
        entity.setStockBasicGood(cursor.getDouble(offset + 22));
        entity.setCivilDestroy(cursor.getDouble(offset + 23));
        entity.setCivilSeriousDamage(cursor.getDouble(offset + 24));
        entity.setCivilDamage(cursor.getDouble(offset + 25));
        entity.setCivilSlightDamage(cursor.getDouble(offset + 26));
        entity.setCivilBasicGood(cursor.getDouble(offset + 27));
        entity.setOtherDestroy(cursor.getDouble(offset + 28));
        entity.setOtherSeriousDamage(cursor.getDouble(offset + 29));
        entity.setOtherDamage(cursor.getDouble(offset + 30));
        entity.setOtherSlightDamage(cursor.getDouble(offset + 31));
        entity.setOtherBasicGood(cursor.getDouble(offset + 32));
        entity.setIsUpload(cursor.getInt(offset + 33));
        entity.setState(cursor.getInt(offset + 34));
        entity.setINQUIRERID(cursor.isNull(offset + 35) ? null : cursor.getString(offset + 35));
        entity.setINQUIRERNAME(cursor.isNull(offset + 36) ? null : cursor.getString(offset + 36));
        entity.setINQUIRERTIME(cursor.isNull(offset + 37) ? null : cursor.getString(offset + 37));
        entity.setEventHeadId(cursor.isNull(offset + 38) ? null : cursor.getString(offset + 38));
     }
    
    @Override
    protected final String updateKeyAfterInsert(HouseGroupModel entity, long rowId) {
        return entity.getID();
    }
    
    @Override
    public String getKey(HouseGroupModel entity) {
        if(entity != null) {
            return entity.getID();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(HouseGroupModel entity) {
        return entity.getID() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}

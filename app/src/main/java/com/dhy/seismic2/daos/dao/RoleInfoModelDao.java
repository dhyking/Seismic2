package com.dhy.seismic2.daos.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.dhy.seismic2.daos.bean.RoleInfoModel;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "Role".
*/
public class RoleInfoModelDao extends AbstractDao<RoleInfoModel, String> {

    public static final String TABLENAME = "Role";

    /**
     * Properties of entity RoleInfoModel.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property ID = new Property(0, String.class, "ID", true, "ID");
        public final static Property ROLENAME = new Property(1, String.class, "ROLENAME", false, "ROLENAME");
        public final static Property PARENTID = new Property(2, String.class, "PARENTID", false, "PARENTID");
        public final static Property DESCRIPTION = new Property(3, String.class, "DESCRIPTION", false, "DESCRIPTION");
        public final static Property MODIF = new Property(4, String.class, "MODIF", false, "MODIF");
        public final static Property MODIFIER = new Property(5, String.class, "MODIFIER", false, "MODIFIER");
        public final static Property MODIFIEDTIME = new Property(6, String.class, "MODIFIEDTIME", false, "MODIFIEDTIME");
        public final static Property STATE = new Property(7, int.class, "STATE", false, "STATE");
    }


    public RoleInfoModelDao(DaoConfig config) {
        super(config);
    }
    
    public RoleInfoModelDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"Role\" (" + //
                "\"ID\" TEXT PRIMARY KEY NOT NULL ," + // 0: ID
                "\"ROLENAME\" TEXT," + // 1: ROLENAME
                "\"PARENTID\" TEXT," + // 2: PARENTID
                "\"DESCRIPTION\" TEXT," + // 3: DESCRIPTION
                "\"MODIF\" TEXT," + // 4: MODIF
                "\"MODIFIER\" TEXT," + // 5: MODIFIER
                "\"MODIFIEDTIME\" TEXT," + // 6: MODIFIEDTIME
                "\"STATE\" INTEGER NOT NULL );"); // 7: STATE
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"Role\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, RoleInfoModel entity) {
        stmt.clearBindings();
 
        String ID = entity.getID();
        if (ID != null) {
            stmt.bindString(1, ID);
        }
 
        String ROLENAME = entity.getROLENAME();
        if (ROLENAME != null) {
            stmt.bindString(2, ROLENAME);
        }
 
        String PARENTID = entity.getPARENTID();
        if (PARENTID != null) {
            stmt.bindString(3, PARENTID);
        }
 
        String DESCRIPTION = entity.getDESCRIPTION();
        if (DESCRIPTION != null) {
            stmt.bindString(4, DESCRIPTION);
        }
 
        String MODIF = entity.getMODIF();
        if (MODIF != null) {
            stmt.bindString(5, MODIF);
        }
 
        String MODIFIER = entity.getMODIFIER();
        if (MODIFIER != null) {
            stmt.bindString(6, MODIFIER);
        }
 
        String MODIFIEDTIME = entity.getMODIFIEDTIME();
        if (MODIFIEDTIME != null) {
            stmt.bindString(7, MODIFIEDTIME);
        }
        stmt.bindLong(8, entity.getSTATE());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, RoleInfoModel entity) {
        stmt.clearBindings();
 
        String ID = entity.getID();
        if (ID != null) {
            stmt.bindString(1, ID);
        }
 
        String ROLENAME = entity.getROLENAME();
        if (ROLENAME != null) {
            stmt.bindString(2, ROLENAME);
        }
 
        String PARENTID = entity.getPARENTID();
        if (PARENTID != null) {
            stmt.bindString(3, PARENTID);
        }
 
        String DESCRIPTION = entity.getDESCRIPTION();
        if (DESCRIPTION != null) {
            stmt.bindString(4, DESCRIPTION);
        }
 
        String MODIF = entity.getMODIF();
        if (MODIF != null) {
            stmt.bindString(5, MODIF);
        }
 
        String MODIFIER = entity.getMODIFIER();
        if (MODIFIER != null) {
            stmt.bindString(6, MODIFIER);
        }
 
        String MODIFIEDTIME = entity.getMODIFIEDTIME();
        if (MODIFIEDTIME != null) {
            stmt.bindString(7, MODIFIEDTIME);
        }
        stmt.bindLong(8, entity.getSTATE());
    }

    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0);
    }    

    @Override
    public RoleInfoModel readEntity(Cursor cursor, int offset) {
        RoleInfoModel entity = new RoleInfoModel( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // ID
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // ROLENAME
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // PARENTID
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // DESCRIPTION
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // MODIF
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // MODIFIER
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // MODIFIEDTIME
            cursor.getInt(offset + 7) // STATE
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, RoleInfoModel entity, int offset) {
        entity.setID(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setROLENAME(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setPARENTID(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setDESCRIPTION(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setMODIF(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setMODIFIER(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setMODIFIEDTIME(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setSTATE(cursor.getInt(offset + 7));
     }
    
    @Override
    protected final String updateKeyAfterInsert(RoleInfoModel entity, long rowId) {
        return entity.getID();
    }
    
    @Override
    public String getKey(RoleInfoModel entity) {
        if(entity != null) {
            return entity.getID();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(RoleInfoModel entity) {
        return entity.getID() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
